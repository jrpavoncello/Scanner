/* The following code was generated by JFlex 1.4.3 on 10/9/15 8:17 PM */

//Returned when reserved words, operators, or anything that we only care about what they are with no context are encountered
class CSXToken
{
	int linenum;
	int colnum;

	CSXToken()
	{

	}

	CSXToken(int line,int col)
	{
		linenum = line;
		colnum = col;
	}

	CSXToken(Position p)
	{
		linenum = p.linenum;
		colnum = p.colnum;

	}

}

//Returned when integer literals are encountered so that we can display the intValue in P2
class CSXIntLitToken extends CSXToken
{
	int intValue;
	CSXIntLitToken(int val, Position p)
	{
		super(p);
		intValue=val;
	}
}

//Returned when float literals are encountered so that we can display the floatValue in P2
class CSXFloatLitToken extends CSXToken
{
	float floatValue;
	CSXFloatLitToken(float floatValue, Position p)
	{
		super(p);
		this.floatValue = floatValue;
	}
}

//Returned when indentifier tokens are encountered so that we can display the name of the identifier in P2
class CSXIdentifierToken extends CSXToken
{
	String identifierValue;
	CSXIdentifierToken(String identifierValue, Position p)
	{
		super(p);
		this.identifierValue = identifierValue;
	}

}

//Returned when character literal are encountered so that we can display the charValue in P2
//This may look odd when displayed in the case of escaped characters, as we display them as is
class CSXCharLitToken extends CSXToken
{
	char charValue;
	CSXCharLitToken(char charValue, Position p)
	{
		super(p);
		this.charValue = charValue;
	}
}

//Returned when string literal are encountered so that we can display the stringValue in P2
class CSXStringLitToken extends CSXToken
{
	String stringValue;
	CSXStringLitToken(String stringValue, Position p)
	{
		super(p);
		this.stringValue = stringValue;
	}
}

//Returned when any errors are encountered so that we can display the error message in P2
class CSXErrorToken extends CSXToken
{
	String error;
	CSXErrorToken(String error, Position p)
	{
		super(p);
		this.error = error;
	}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Position
{
	int  linenum; 			/* maintain this as line number current token was scanned on */
	int  colnum; 			/* maintain this as column number current token began at */
	int  line; 				/* maintain this as line number after scanning current token  */
	int  col; 				/* maintain this as column number after scanning current token  */
	Position()
	{
		linenum = 1;
		colnum = 1;
		line = 1;
		col = 1;
	}
	void setpos()
	{ // set starting position for current token
		linenum = line;
		colnum = col;
	}
} ;


//This class is used by the scanner to return token information that is useful for the parser
//This class will be replaced in our parser project by the java_cup.runtime.Symbol class
class Symbol
{
	public int sym;
	public CSXToken value;
	public Symbol(int tokenType, CSXToken theToken)
	{
		sym = tokenType;
		value = theToken;
	}
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/9/15 8:17 PM from the specification file
 * <tt>F:/dev/Java/Scanner/src/csx.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FoundIdentifierMatch = 4;
  public static final int FoundIdentifier = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\111\1\3\2\0\1\4\22\0\1\12\1\72\1\6\1\1"+
    "\2\43\1\66\1\42\1\105\1\106\1\75\1\73\1\100\1\74\1\110"+
    "\1\2\12\5\1\77\1\76\1\70\1\67\1\71\2\11\1\22\1\30"+
    "\1\31\1\37\1\27\1\17\1\15\1\25\1\26\1\15\1\41\1\20"+
    "\1\15\1\32\1\21\1\40\1\15\1\35\1\34\1\23\1\33\1\36"+
    "\1\24\2\15\1\15\1\103\1\7\1\104\1\43\1\16\1\43\1\50"+
    "\1\55\1\56\1\62\1\54\1\45\1\44\1\52\1\53\1\44\1\64"+
    "\1\46\1\44\1\13\1\47\1\63\1\44\1\10\1\60\1\14\1\57"+
    "\1\61\1\51\3\44\1\101\1\65\1\102\1\107\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\2\6\1\1\10\6\1\10\2\1\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\2\1\1\31"+
    "\1\15\1\16\1\32\1\0\1\33\1\34\1\35\1\0"+
    "\1\36\1\5\3\6\1\0\1\34\4\6\1\37\10\6"+
    "\1\10\1\0\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\4\1\0\1\50\1\51\1\32\1\0"+
    "\1\33\1\34\1\0\3\5\3\6\1\34\3\6\1\52"+
    "\10\6\1\10\1\0\1\53\13\54\13\55\1\56\1\36"+
    "\1\6\1\57\1\60\3\6\1\61\1\6\1\62\3\6"+
    "\1\63\1\64\1\6\6\54\1\65\10\54\6\55\1\66"+
    "\10\55\1\56\1\6\1\67\1\70\1\71\1\72\1\73"+
    "\1\6\1\74\1\75\13\54\13\55\1\76\1\6\4\54"+
    "\4\55\1\6\2\54\2\55\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\336\0\u01bc"+
    "\0\u0206\0\u0250\0\u029a\0\336\0\u02e4\0\u032e\0\u0378\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862"+
    "\0\336\0\336\0\336\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\336\0\u08ac\0\u08f6\0\336\0\u0940\0\u098a\0\u09d4"+
    "\0\u0a1e\0\u0a68\0\u0ab2\0\u08f6\0\u0afc\0\336\0\u0b46\0\u0b90"+
    "\0\u0bda\0\u0c24\0\u0378\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c\0\u0d96"+
    "\0\u02e4\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c"+
    "\0\u0fe6\0\u1030\0\u107a\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\u10c4\0\u110e\0\u1158\0\u08f6\0\u10c4\0\u110e\0\224"+
    "\0\u11a2\0\336\0\336\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314"+
    "\0\u135e\0\u13a8\0\u0378\0\u13f2\0\u143c\0\u1486\0\u02e4\0\u14d0"+
    "\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720"+
    "\0\u176a\0\336\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926"+
    "\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76"+
    "\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6"+
    "\0\u1e10\0\u12ca\0\u1e5a\0\u02e4\0\u02e4\0\u1ea4\0\u1eee\0\u1f38"+
    "\0\u02e4\0\u1f82\0\u02e4\0\u1fcc\0\u2016\0\u2060\0\u02e4\0\u02e4"+
    "\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266\0\u17fe"+
    "\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6"+
    "\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628\0\u2672\0\u1b2c\0\u26bc"+
    "\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878\0\u28c2\0\336"+
    "\0\u290c\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u2956\0\u02e4"+
    "\0\u02e4\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c"+
    "\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u2dac"+
    "\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\u02e4"+
    "\0\u2ffc\0\u3046\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8\0\u3202"+
    "\0\u324c\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be\0\u02e4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\4\1\14\1\15\1\16\1\15\1\17\1\20"+
    "\3\15\1\16\1\21\1\15\1\22\1\23\1\24\1\25"+
    "\3\15\1\13\1\26\1\15\1\27\1\15\1\30\1\4"+
    "\1\15\1\20\3\15\1\21\1\15\1\22\1\23\1\24"+
    "\1\25\2\15\1\26\1\15\1\27\1\15\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\4\1\13\1\4\1\14\1\15\1\16"+
    "\1\15\1\17\1\20\3\15\1\16\1\21\1\15\1\22"+
    "\1\23\1\24\1\25\3\15\1\13\1\26\1\15\1\27"+
    "\1\15\1\30\1\4\1\15\1\20\3\15\1\21\1\15"+
    "\1\22\1\23\1\24\1\25\2\15\1\26\1\15\1\27"+
    "\1\15\1\31\1\32\1\33\1\34\1\35\1\36\1\56"+
    "\1\57\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\10\0\1\60"+
    "\2\0\3\60\1\0\23\60\2\0\21\60\140\0\1\61"+
    "\112\0\1\62\112\0\1\7\113\0\1\11\2\0\1\63"+
    "\2\0\3\63\1\0\23\63\2\0\21\63\23\0\1\64"+
    "\1\0\1\65\2\12\2\65\1\12\1\66\1\67\101\12"+
    "\1\65\5\0\1\70\2\0\1\15\2\0\3\15\1\70"+
    "\10\15\1\71\12\15\2\0\10\15\1\71\10\15\32\0"+
    "\1\70\2\0\1\15\2\0\3\15\1\70\23\15\2\0"+
    "\21\15\32\0\1\70\2\0\1\72\2\0\3\15\1\70"+
    "\16\15\1\72\4\15\2\0\21\15\32\0\1\73\2\0"+
    "\1\74\2\0\3\74\1\0\23\74\2\0\21\74\32\0"+
    "\1\70\2\0\1\15\2\0\3\15\1\70\1\15\1\75"+
    "\1\15\1\76\17\15\2\0\2\15\1\75\1\15\1\76"+
    "\14\15\32\0\1\70\2\0\1\15\2\0\3\15\1\70"+
    "\6\15\1\77\14\15\2\0\6\15\1\77\12\15\32\0"+
    "\1\70\2\0\1\15\2\0\1\100\2\15\1\70\1\101"+
    "\12\15\1\100\7\15\2\0\1\15\1\101\17\15\32\0"+
    "\1\70\2\0\1\15\2\0\3\15\1\70\1\15\1\102"+
    "\21\15\2\0\2\15\1\102\16\15\32\0\1\70\2\0"+
    "\1\103\2\0\3\15\1\70\2\15\1\104\13\15\1\103"+
    "\4\15\2\0\3\15\1\104\15\15\32\0\1\70\2\0"+
    "\1\15\2\0\3\15\1\70\1\15\1\105\1\106\3\15"+
    "\1\107\14\15\2\0\2\15\1\105\1\106\2\15\1\107"+
    "\12\15\32\0\1\70\2\0\1\15\2\0\3\15\1\70"+
    "\2\15\1\110\20\15\2\0\3\15\1\110\15\15\32\0"+
    "\1\70\2\0\1\111\2\0\3\15\1\70\16\15\1\111"+
    "\4\15\2\0\21\15\26\0\1\112\4\0\1\112\1\113"+
    "\1\112\1\0\3\112\1\0\1\112\24\0\24\112\3\0"+
    "\1\112\6\0\5\112\1\0\1\112\67\0\1\114\112\0"+
    "\1\115\112\0\1\116\111\0\1\117\111\0\1\120\111\0"+
    "\1\121\115\0\1\122\112\0\1\123\22\0\1\124\102\0"+
    "\1\125\6\0\1\64\177\0\1\126\112\0\1\127\22\0"+
    "\1\130\2\0\1\60\2\0\3\60\1\130\23\60\2\0"+
    "\21\60\25\0\1\61\1\131\110\61\3\62\1\132\106\62"+
    "\5\0\1\133\2\0\1\63\2\0\3\63\1\133\23\63"+
    "\2\0\21\63\25\0\6\65\1\66\1\134\102\65\1\0"+
    "\2\135\2\0\1\135\2\136\1\137\2\135\2\136\74\135"+
    "\11\0\1\15\2\0\3\15\1\0\23\15\2\0\21\15"+
    "\32\0\1\70\2\0\1\15\2\0\1\15\1\140\1\15"+
    "\1\70\3\15\1\141\1\140\16\15\2\0\4\15\1\141"+
    "\14\15\32\0\1\70\2\0\1\15\2\0\3\15\1\70"+
    "\14\15\1\142\6\15\2\0\13\15\1\142\5\15\32\0"+
    "\1\143\2\0\1\74\2\0\3\74\1\143\23\74\2\0"+
    "\21\74\32\0\1\70\2\0\1\15\2\0\3\15\1\70"+
    "\2\15\1\144\20\15\2\0\3\15\1\144\15\15\32\0"+
    "\1\70\2\0\1\15\2\0\3\15\1\70\1\15\1\145"+
    "\21\15\2\0\2\15\1\145\16\15\32\0\1\70\2\0"+
    "\1\15\2\0\3\15\1\70\7\15\1\146\13\15\2\0"+
    "\7\15\1\146\11\15\32\0\1\70\2\0\1\15\2\0"+
    "\1\15\1\147\1\15\1\70\4\15\1\147\16\15\2\0"+
    "\21\15\32\0\1\70\2\0\1\15\2\0\3\15\1\70"+
    "\15\15\1\150\5\15\2\0\14\15\1\150\4\15\32\0"+
    "\1\70\2\0\1\15\2\0\3\15\1\70\10\15\1\151"+
    "\12\15\2\0\10\15\1\151\10\15\32\0\1\70\2\0"+
    "\1\15\2\0\3\15\1\70\2\15\1\152\20\15\2\0"+
    "\3\15\1\152\15\15\32\0\1\70\2\0\1\15\2\0"+
    "\3\15\1\70\3\15\1\153\17\15\2\0\4\15\1\153"+
    "\14\15\32\0\1\70\2\0\1\15\2\0\1\154\2\15"+
    "\1\70\13\15\1\154\7\15\2\0\21\15\32\0\1\70"+
    "\2\0\1\15\2\0\3\15\1\70\3\15\1\155\17\15"+
    "\2\0\4\15\1\155\14\15\32\0\1\70\2\0\1\15"+
    "\2\0\3\15\1\70\7\15\1\156\13\15\2\0\7\15"+
    "\1\156\11\15\32\0\1\70\2\0\1\15\2\0\3\15"+
    "\1\70\7\15\1\157\13\15\2\0\7\15\1\157\11\15"+
    "\26\0\1\160\4\0\1\160\1\161\1\160\1\0\3\160"+
    "\1\0\1\160\23\0\1\162\24\160\3\0\1\160\6\0"+
    "\5\160\1\0\1\160\10\0\3\112\2\0\2\112\25\0"+
    "\1\112\57\0\1\163\2\0\1\164\1\165\1\164\1\0"+
    "\1\166\3\164\1\165\1\167\1\164\1\170\1\171\1\172"+
    "\1\173\3\164\1\163\1\174\1\164\1\175\1\164\2\0"+
    "\1\164\1\166\3\164\1\167\1\164\1\170\1\171\1\172"+
    "\1\173\2\164\1\174\1\164\1\175\1\164\35\0\1\176"+
    "\2\0\1\177\1\200\1\177\1\0\1\201\3\177\1\200"+
    "\1\202\1\177\1\203\1\204\1\205\1\206\3\177\1\176"+
    "\1\207\1\177\1\210\1\177\2\0\1\177\1\201\3\177"+
    "\1\202\1\177\1\203\1\204\1\205\1\206\2\177\1\207"+
    "\1\177\1\210\1\177\32\0\1\124\102\0\1\64\1\0"+
    "\1\61\1\211\110\61\6\0\2\65\3\0\2\65\76\0"+
    "\2\135\2\0\1\135\1\0\1\137\101\135\1\0\1\65"+
    "\2\12\2\65\1\12\1\212\1\67\1\136\2\12\2\136"+
    "\74\12\1\65\1\0\2\135\2\0\1\135\3\137\2\135"+
    "\2\137\74\135\6\0\1\70\2\0\1\15\2\0\3\15"+
    "\1\70\14\15\1\213\6\15\2\0\13\15\1\213\5\15"+
    "\32\0\1\70\2\0\1\15\2\0\3\15\1\70\20\15"+
    "\1\214\2\15\2\0\16\15\1\214\2\15\32\0\1\70"+
    "\2\0\1\15\2\0\3\15\1\70\10\15\1\215\12\15"+
    "\2\0\10\15\1\215\10\15\32\0\1\70\2\0\1\15"+
    "\2\0\3\15\1\70\3\15\1\216\17\15\2\0\4\15"+
    "\1\216\14\15\32\0\1\70\2\0\1\15\2\0\3\15"+
    "\1\70\15\15\1\217\5\15\2\0\14\15\1\217\4\15"+
    "\32\0\1\70\2\0\1\15\2\0\3\15\1\70\1\15"+
    "\1\220\21\15\2\0\2\15\1\220\16\15\32\0\1\70"+
    "\2\0\1\15\2\0\3\15\1\70\10\15\1\221\12\15"+
    "\2\0\10\15\1\221\10\15\32\0\1\70\2\0\1\15"+
    "\2\0\3\15\1\70\3\15\1\222\17\15\2\0\4\15"+
    "\1\222\14\15\32\0\1\70\2\0\1\15\2\0\3\15"+
    "\1\70\1\15\1\223\21\15\2\0\2\15\1\223\16\15"+
    "\32\0\1\70\2\0\1\15\2\0\3\15\1\70\15\15"+
    "\1\224\5\15\2\0\14\15\1\224\4\15\32\0\1\70"+
    "\2\0\1\15\2\0\1\15\1\225\1\15\1\70\4\15"+
    "\1\225\10\15\1\226\5\15\2\0\14\15\1\226\4\15"+
    "\32\0\1\70\2\0\1\227\2\0\3\15\1\70\16\15"+
    "\1\227\4\15\2\0\21\15\32\0\1\70\2\0\1\15"+
    "\2\0\3\15\1\70\20\15\1\230\2\15\2\0\16\15"+
    "\1\230\2\15\32\0\1\70\2\0\1\15\2\0\1\231"+
    "\2\15\1\70\13\15\1\231\7\15\2\0\21\15\26\0"+
    "\1\160\4\0\1\160\1\161\1\160\1\0\3\160\1\0"+
    "\1\160\24\0\24\160\3\0\1\160\6\0\5\160\1\0"+
    "\1\160\10\0\3\160\2\0\2\160\25\0\1\160\54\0"+
    "\1\232\2\0\1\164\2\0\3\164\1\232\10\164\1\233"+
    "\12\164\2\0\10\164\1\233\10\164\32\0\1\232\2\0"+
    "\1\164\2\0\3\164\1\232\23\164\2\0\21\164\32\0"+
    "\1\232\2\0\1\234\2\0\3\164\1\232\16\164\1\234"+
    "\4\164\2\0\21\164\32\0\1\232\2\0\1\164\2\0"+
    "\3\164\1\232\1\164\1\235\1\164\1\171\17\164\2\0"+
    "\2\164\1\235\1\164\1\171\14\164\32\0\1\232\2\0"+
    "\1\164\2\0\3\164\1\232\6\164\1\236\14\164\2\0"+
    "\6\164\1\236\12\164\32\0\1\232\2\0\1\164\2\0"+
    "\1\237\2\164\1\232\1\240\12\164\1\237\7\164\2\0"+
    "\1\164\1\240\17\164\32\0\1\232\2\0\1\164\2\0"+
    "\3\164\1\232\1\164\1\241\21\164\2\0\2\164\1\241"+
    "\16\164\32\0\1\232\2\0\1\242\2\0\3\164\1\232"+
    "\2\164\1\243\13\164\1\242\4\164\2\0\3\164\1\243"+
    "\15\164\32\0\1\232\2\0\1\164\2\0\3\164\1\232"+
    "\1\164\1\244\1\245\3\164\1\246\14\164\2\0\2\164"+
    "\1\244\1\245\2\164\1\246\12\164\32\0\1\232\2\0"+
    "\1\164\2\0\3\164\1\232\2\164\1\247\20\164\2\0"+
    "\3\164\1\247\15\164\32\0\1\232\2\0\1\250\2\0"+
    "\3\164\1\232\16\164\1\250\4\164\2\0\21\164\32\0"+
    "\1\251\2\0\1\177\2\0\3\177\1\251\10\177\1\252"+
    "\12\177\2\0\10\177\1\252\10\177\32\0\1\251\2\0"+
    "\1\177\2\0\3\177\1\251\23\177\2\0\21\177\32\0"+
    "\1\251\2\0\1\253\2\0\3\177\1\251\16\177\1\253"+
    "\4\177\2\0\21\177\32\0\1\251\2\0\1\177\2\0"+
    "\3\177\1\251\1\177\1\254\1\177\1\204\17\177\2\0"+
    "\2\177\1\254\1\177\1\204\14\177\32\0\1\251\2\0"+
    "\1\177\2\0\3\177\1\251\6\177\1\255\14\177\2\0"+
    "\6\177\1\255\12\177\32\0\1\251\2\0\1\177\2\0"+
    "\1\256\2\177\1\251\1\257\12\177\1\256\7\177\2\0"+
    "\1\177\1\257\17\177\32\0\1\251\2\0\1\177\2\0"+
    "\3\177\1\251\1\177\1\260\21\177\2\0\2\177\1\260"+
    "\16\177\32\0\1\251\2\0\1\261\2\0\3\177\1\251"+
    "\2\177\1\262\13\177\1\261\4\177\2\0\3\177\1\262"+
    "\15\177\32\0\1\251\2\0\1\177\2\0\3\177\1\251"+
    "\1\177\1\263\1\264\3\177\1\265\14\177\2\0\2\177"+
    "\1\263\1\264\2\177\1\265\12\177\32\0\1\251\2\0"+
    "\1\177\2\0\3\177\1\251\2\177\1\266\20\177\2\0"+
    "\3\177\1\266\15\177\32\0\1\251\2\0\1\267\2\0"+
    "\3\177\1\251\16\177\1\267\4\177\2\0\21\177\26\0"+
    "\1\270\115\0\1\70\2\0\1\271\2\0\3\15\1\70"+
    "\16\15\1\271\4\15\2\0\21\15\32\0\1\70\2\0"+
    "\1\15\2\0\1\15\1\272\1\15\1\70\4\15\1\272"+
    "\16\15\2\0\21\15\32\0\1\70\2\0\1\15\2\0"+
    "\3\15\1\70\10\15\1\273\12\15\2\0\10\15\1\273"+
    "\10\15\32\0\1\70\2\0\1\15\2\0\3\15\1\70"+
    "\10\15\1\274\12\15\2\0\10\15\1\274\10\15\32\0"+
    "\1\70\2\0\1\15\2\0\3\15\1\70\22\15\1\275"+
    "\2\0\20\15\1\275\32\0\1\70\2\0\1\15\2\0"+
    "\3\15\1\70\15\15\1\276\5\15\2\0\14\15\1\276"+
    "\4\15\32\0\1\70\2\0\1\15\2\0\3\15\1\70"+
    "\7\15\1\277\13\15\2\0\7\15\1\277\11\15\32\0"+
    "\1\70\2\0\1\15\2\0\1\15\1\300\1\15\1\70"+
    "\4\15\1\300\16\15\2\0\21\15\32\0\1\70\2\0"+
    "\1\15\2\0\1\15\1\301\1\15\1\70\4\15\1\301"+
    "\16\15\2\0\21\15\35\0\1\164\2\0\3\164\1\0"+
    "\23\164\2\0\21\164\32\0\1\232\2\0\1\164\2\0"+
    "\1\164\1\302\1\164\1\232\3\164\1\303\1\302\16\164"+
    "\2\0\4\164\1\303\14\164\32\0\1\232\2\0\1\164"+
    "\2\0\3\164\1\232\14\164\1\304\6\164\2\0\13\164"+
    "\1\304\5\164\32\0\1\232\2\0\1\164\2\0\3\164"+
    "\1\232\2\164\1\305\20\164\2\0\3\164\1\305\15\164"+
    "\32\0\1\232\2\0\1\164\2\0\3\164\1\232\7\164"+
    "\1\306\13\164\2\0\7\164\1\306\11\164\32\0\1\232"+
    "\2\0\1\164\2\0\1\164\1\240\1\164\1\232\4\164"+
    "\1\240\16\164\2\0\21\164\32\0\1\232\2\0\1\164"+
    "\2\0\3\164\1\232\15\164\1\304\5\164\2\0\14\164"+
    "\1\304\4\164\32\0\1\232\2\0\1\164\2\0\3\164"+
    "\1\232\10\164\1\307\12\164\2\0\10\164\1\307\10\164"+
    "\32\0\1\232\2\0\1\164\2\0\3\164\1\232\2\164"+
    "\1\310\20\164\2\0\3\164\1\310\15\164\32\0\1\232"+
    "\2\0\1\164\2\0\3\164\1\232\3\164\1\311\17\164"+
    "\2\0\4\164\1\311\14\164\32\0\1\232\2\0\1\164"+
    "\2\0\1\312\2\164\1\232\13\164\1\312\7\164\2\0"+
    "\21\164\32\0\1\232\2\0\1\164\2\0\3\164\1\232"+
    "\3\164\1\313\17\164\2\0\4\164\1\313\14\164\32\0"+
    "\1\232\2\0\1\164\2\0\3\164\1\232\7\164\1\303"+
    "\13\164\2\0\7\164\1\303\11\164\32\0\1\232\2\0"+
    "\1\164\2\0\3\164\1\232\7\164\1\314\13\164\2\0"+
    "\7\164\1\314\11\164\35\0\1\177\2\0\3\177\1\0"+
    "\23\177\2\0\21\177\32\0\1\251\2\0\1\177\2\0"+
    "\1\177\1\315\1\177\1\251\3\177\1\316\1\315\16\177"+
    "\2\0\4\177\1\316\14\177\32\0\1\251\2\0\1\177"+
    "\2\0\3\177\1\251\14\177\1\317\6\177\2\0\13\177"+
    "\1\317\5\177\32\0\1\251\2\0\1\177\2\0\3\177"+
    "\1\251\2\177\1\320\20\177\2\0\3\177\1\320\15\177"+
    "\32\0\1\251\2\0\1\177\2\0\3\177\1\251\7\177"+
    "\1\321\13\177\2\0\7\177\1\321\11\177\32\0\1\251"+
    "\2\0\1\177\2\0\1\177\1\257\1\177\1\251\4\177"+
    "\1\257\16\177\2\0\21\177\32\0\1\251\2\0\1\177"+
    "\2\0\3\177\1\251\15\177\1\317\5\177\2\0\14\177"+
    "\1\317\4\177\32\0\1\251\2\0\1\177\2\0\3\177"+
    "\1\251\10\177\1\322\12\177\2\0\10\177\1\322\10\177"+
    "\32\0\1\251\2\0\1\177\2\0\3\177\1\251\2\177"+
    "\1\323\20\177\2\0\3\177\1\323\15\177\32\0\1\251"+
    "\2\0\1\177\2\0\3\177\1\251\3\177\1\324\17\177"+
    "\2\0\4\177\1\324\14\177\32\0\1\251\2\0\1\177"+
    "\2\0\1\325\2\177\1\251\13\177\1\325\7\177\2\0"+
    "\21\177\32\0\1\251\2\0\1\177\2\0\3\177\1\251"+
    "\3\177\1\326\17\177\2\0\4\177\1\326\14\177\32\0"+
    "\1\251\2\0\1\177\2\0\3\177\1\251\7\177\1\316"+
    "\13\177\2\0\7\177\1\316\11\177\32\0\1\251\2\0"+
    "\1\177\2\0\3\177\1\251\7\177\1\327\13\177\2\0"+
    "\7\177\1\327\11\177\32\0\1\70\2\0\1\15\2\0"+
    "\1\330\2\15\1\70\13\15\1\330\7\15\2\0\21\15"+
    "\32\0\1\70\2\0\1\15\2\0\1\331\2\15\1\70"+
    "\13\15\1\331\7\15\2\0\21\15\32\0\1\232\2\0"+
    "\1\164\2\0\3\164\1\232\14\164\1\332\6\164\2\0"+
    "\13\164\1\332\5\164\32\0\1\232\2\0\1\164\2\0"+
    "\3\164\1\232\20\164\1\240\2\164\2\0\16\164\1\240"+
    "\2\164\32\0\1\232\2\0\1\164\2\0\3\164\1\232"+
    "\10\164\1\240\12\164\2\0\10\164\1\240\10\164\32\0"+
    "\1\232\2\0\1\164\2\0\3\164\1\232\3\164\1\237"+
    "\17\164\2\0\4\164\1\237\14\164\32\0\1\232\2\0"+
    "\1\164\2\0\3\164\1\232\1\164\1\304\21\164\2\0"+
    "\2\164\1\304\16\164\32\0\1\232\2\0\1\164\2\0"+
    "\3\164\1\232\3\164\1\333\17\164\2\0\4\164\1\333"+
    "\14\164\32\0\1\232\2\0\1\164\2\0\3\164\1\232"+
    "\1\164\1\240\21\164\2\0\2\164\1\240\16\164\32\0"+
    "\1\232\2\0\1\164\2\0\3\164\1\232\15\164\1\334"+
    "\5\164\2\0\14\164\1\334\4\164\32\0\1\232\2\0"+
    "\1\164\2\0\1\164\1\335\1\164\1\232\4\164\1\335"+
    "\10\164\1\237\5\164\2\0\14\164\1\237\4\164\32\0"+
    "\1\232\2\0\1\240\2\0\3\164\1\232\16\164\1\240"+
    "\4\164\2\0\21\164\32\0\1\232\2\0\1\164\2\0"+
    "\1\237\2\164\1\232\13\164\1\237\7\164\2\0\21\164"+
    "\32\0\1\251\2\0\1\177\2\0\3\177\1\251\14\177"+
    "\1\336\6\177\2\0\13\177\1\336\5\177\32\0\1\251"+
    "\2\0\1\177\2\0\3\177\1\251\20\177\1\257\2\177"+
    "\2\0\16\177\1\257\2\177\32\0\1\251\2\0\1\177"+
    "\2\0\3\177\1\251\10\177\1\257\12\177\2\0\10\177"+
    "\1\257\10\177\32\0\1\251\2\0\1\177\2\0\3\177"+
    "\1\251\3\177\1\256\17\177\2\0\4\177\1\256\14\177"+
    "\32\0\1\251\2\0\1\177\2\0\3\177\1\251\1\177"+
    "\1\317\21\177\2\0\2\177\1\317\16\177\32\0\1\251"+
    "\2\0\1\177\2\0\3\177\1\251\3\177\1\337\17\177"+
    "\2\0\4\177\1\337\14\177\32\0\1\251\2\0\1\177"+
    "\2\0\3\177\1\251\1\177\1\257\21\177\2\0\2\177"+
    "\1\257\16\177\32\0\1\251\2\0\1\177\2\0\3\177"+
    "\1\251\15\177\1\340\5\177\2\0\14\177\1\340\4\177"+
    "\32\0\1\251\2\0\1\177\2\0\1\177\1\341\1\177"+
    "\1\251\4\177\1\341\10\177\1\256\5\177\2\0\14\177"+
    "\1\256\4\177\32\0\1\251\2\0\1\257\2\0\3\177"+
    "\1\251\16\177\1\257\4\177\2\0\21\177\32\0\1\251"+
    "\2\0\1\177\2\0\1\256\2\177\1\251\13\177\1\256"+
    "\7\177\2\0\21\177\32\0\1\70\2\0\1\15\2\0"+
    "\3\15\1\70\14\15\1\342\6\15\2\0\13\15\1\342"+
    "\5\15\32\0\1\232\2\0\1\343\2\0\3\164\1\232"+
    "\16\164\1\343\4\164\2\0\21\164\32\0\1\232\2\0"+
    "\1\164\2\0\3\164\1\232\22\164\1\240\2\0\20\164"+
    "\1\240\32\0\1\232\2\0\1\164\2\0\3\164\1\232"+
    "\15\164\1\240\5\164\2\0\14\164\1\240\4\164\32\0"+
    "\1\232\2\0\1\164\2\0\3\164\1\232\7\164\1\344"+
    "\13\164\2\0\7\164\1\344\11\164\32\0\1\251\2\0"+
    "\1\345\2\0\3\177\1\251\16\177\1\345\4\177\2\0"+
    "\21\177\32\0\1\251\2\0\1\177\2\0\3\177\1\251"+
    "\22\177\1\257\2\0\20\177\1\257\32\0\1\251\2\0"+
    "\1\177\2\0\3\177\1\251\15\177\1\257\5\177\2\0"+
    "\14\177\1\257\4\177\32\0\1\251\2\0\1\177\2\0"+
    "\3\177\1\251\7\177\1\346\13\177\2\0\7\177\1\346"+
    "\11\177\32\0\1\70\2\0\1\15\2\0\3\15\1\70"+
    "\10\15\1\347\12\15\2\0\10\15\1\347\10\15\32\0"+
    "\1\232\2\0\1\164\2\0\1\240\2\164\1\232\13\164"+
    "\1\240\7\164\2\0\21\164\32\0\1\232\2\0\1\164"+
    "\2\0\1\234\2\164\1\232\13\164\1\234\7\164\2\0"+
    "\21\164\32\0\1\251\2\0\1\177\2\0\1\257\2\177"+
    "\1\251\13\177\1\257\7\177\2\0\21\177\32\0\1\251"+
    "\2\0\1\177\2\0\1\253\2\177\1\251\13\177\1\253"+
    "\7\177\2\0\21\177\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\4\1\1\11\24\1\12\11"+
    "\2\1\1\11\3\1\1\0\3\1\1\0\1\11\4\1"+
    "\1\0\17\1\1\0\6\11\3\1\1\0\3\1\1\0"+
    "\2\11\1\0\24\1\1\0\1\11\105\1\1\11\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
Position Pos = new Position();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 57: 
          { //Reserved word WHILE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos));
          }
        case 64: break;
        case 22: 
          { // Match on ] (closed bracket)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RBRACE, new CSXToken(Pos));
          }
        case 65: break;
        case 28: 
          { //When an identifier is not caught by the identifier rule above, but it is by this rule, then it must be close
	//to an identifier, but start with a number or underscore
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
	new CSXErrorToken("Found invalid Identifier: " + yytext(), Pos));
          }
        case 66: break;
        case 3: 
          { //Newline non-printable character including \n and \r\n
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.line += 1;
	Pos.col = 1;
          }
        case 67: break;
        case 32: 
          { // Match || (boolean or) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COR,
			new CSXToken(Pos));
          }
        case 68: break;
        case 41: 
          { // Duplicate approach as ++, see ++ for details
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC, new CSXToken(Pos));
          }
        case 69: break;
        case 56: 
          { //Reserved word FALSE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos));
          }
        case 70: break;
        case 24: 
          { // Match on ) (close parentheses)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RPAREN, new CSXToken(Pos));
          }
        case 71: break;
        case 43: 
          { // Match any character literal
	yybegin(YYINITIAL);
	Pos.setpos();
	String charString = yytext();
	Pos.col += charString.length();

	//Find any escaped characters and parse them
	char parsedChar;
	switch(charString)
	{
		case "'\\n'":
			parsedChar = '\n';
			break;
		case "'\\r'":
			parsedChar = '\r';
			break;
		case "'\\t'":
			parsedChar = '\t';
			break;
		case "'\\\\'":
			parsedChar = '\\';
			break;
		case "'\\''":
			parsedChar = '\'';
			break;
		default:
			//If not an escaped character, just return the one character between the single quotes
			parsedChar = charString.charAt(1);
			break;
	}
	
	return new Symbol(sym.CHARLIT,
			new CSXCharLitToken(parsedChar, Pos));
          }
        case 72: break;
        case 63: 
          { //Reserved word CONTINUE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos));
          }
        case 73: break;
        case 51: 
          { //Reserved word CHAR, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos));
          }
        case 74: break;
        case 23: 
          { // Match on ( (open parentheses)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LPAREN, new CSXToken(Pos));
          }
        case 75: break;
        case 58: 
          { //Reserved word BREAK, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos));
          }
        case 76: break;
        case 1: 
          { //Catch anything not caught by any rules above except for EOF and return an error
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found invalid token: " + yytext(), Pos));
          }
        case 77: break;
        case 8: 
          { // Match any runaway character literals
	yybegin(YYINITIAL);
	Pos.setpos();
	
	//Get text, increase column to length of text
	//Rule does not include newline, so no line increment
	String parsed = yytext();
	Pos.col += parsed.length();
	return new Symbol(sym.error,
			new CSXErrorToken("Runaway character found: " + parsed, Pos));
          }
        case 78: break;
        case 46: 
          { // Match on a block comment that can span multiple lines or just a single line
	yybegin(YYINITIAL);
	Pos.setpos();
	
	// Parse all the scanned text for any newline characters, if found increment the line and reset the column
	// If we don't find one, just increment the column
    int rowsSkipped = 0;
    String parseString = yytext();
	for(int i = 0; i < parseString.length(); i++)
	{
		Pos.col++;
		if(parseString.charAt(i) == '\n')
		{
			Pos.col=1;
			Pos.line++;
		}
	}
	
	//Print out the comment for debug purposes
    System.out.println("Block Comment: " + parseString);
          }
        case 79: break;
        case 30: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.STRLIT,
			new CSXStringLitToken(yytext(), Pos));
          }
        case 80: break;
        case 12: 
          { // Match on ! (boolean not) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOT, new CSXToken(Pos));
          }
        case 81: break;
        case 55: 
          { //Reserved word FLOAT, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FLOAT,
			new CSXToken(Pos));
          }
        case 82: break;
        case 34: 
          { // Match == (equality comparison) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.EQ,
			new CSXToken(Pos));
          }
        case 83: break;
        case 5: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	
	//Any runaway strings will not contain the newline, so no need to increment line.
	String parsed = yytext();
	Pos.col += parsed.length();
	return new Symbol(sym.error,
			new CSXErrorToken("Runaway string found: " + parsed, Pos));
          }
        case 84: break;
        case 45: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { // Duplicate approach as ++, see ++ for details
	yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC, new CSXToken(Pos));
          }
        case 85: break;
        case 6: 
          { //When we encounter an identifier with this rule, it means we didn't find any increment or decrement
	//operators before it, so we will enter a state so that we don't error if one follows immediately after
	yybegin(FoundIdentifier);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 86: break;
        case 10: 
          { // Match on < (less than) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LT, new CSXToken(Pos));
          }
        case 87: break;
        case 15: 
          { // Match on * (multiplication) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.TIMES, new CSXToken(Pos));
          }
        case 88: break;
        case 27: 
          { // Match on a single line comment, does not include the newline so no need to increment the row
	yybegin(YYINITIAL);
	String comment = yytext();
    System.out.println("Line Comment: " + comment);
    Pos.setpos();
    Pos.col += comment.length();
          }
        case 89: break;
        case 14: 
          { // Match on - (subtraction) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.MINUS, new CSXToken(Pos));
          }
        case 90: break;
        case 44: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { //If we find an increment, and we lookahead and find an identifier, go into an exclusive state to indicate that we found 
	//an identifier ahead and we don't want to match the regular identifier rule and be put into "FoundIdentifier" state
	yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC, new CSXToken(Pos));
          }
        case 91: break;
        case 35: 
          { // Match <= (less than or equal to) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LEQ, new CSXToken(Pos));
          }
        case 92: break;
        case 60: 
          { //Reserved word CONST, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONST,
			new CSXToken(Pos));
          }
        case 93: break;
        case 52: 
          { //Reserved word VOID, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_VOID,
			new CSXToken(Pos));
          }
        case 94: break;
        case 13: 
          { // Match on + (addition) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.PLUS, new CSXToken(Pos));
          }
        case 95: break;
        case 36: 
          { // Match >= (greater than or equal to) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.GEQ, new CSXToken(Pos));
          }
        case 96: break;
        case 49: 
          { //Reserved word ELSE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos));
          }
        case 97: break;
        case 42: 
          { //Reserved word INT, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_INT,
			new CSXToken(Pos));
          }
        case 98: break;
        case 2: 
          { // Match on / (slash)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SLASH, new CSXToken(Pos));
          }
        case 99: break;
        case 26: 
          { //If we found an identifier match already 
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 100: break;
        case 18: 
          { // Match on , (comma/seperator)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COMMA, new CSXToken(Pos));
          }
        case 101: break;
        case 21: 
          { // Match on [ (open bracket)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACE, new CSXToken(Pos));
          }
        case 102: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { // Duplicate approach as ++, see ++ for details
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"--\" operator without a matching identifier", Pos));
          }
        case 103: break;
        case 39: 
          { // Duplicate approach as ++, see ++ for details
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"--\" operator", Pos));
          }
        case 104: break;
        case 38: 
          { //If we find an increment any states to differentiate its context, such as a look ahead or that we
	//found an identifier before it, then fail because it doesn't have a matching identifier
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"++\" operator", Pos));
          }
        case 105: break;
        case 11: 
          { // Match on > (greater than) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.GT, new CSXToken(Pos));
          }
        case 106: break;
        case 7: 
          { //Space character
	Pos.setpos();
	yybegin(YYINITIAL);
	Pos.col += 1;
          }
        case 107: break;
        case 48: 
          { //Reserved word TRUE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos));
          }
        case 108: break;
        case 40: 
          { //If we find an identifier without a paired increment or decrement, go into the FoundIdentifier state
	//so that we know we found an identifier that is eligible for a pair if one of those operators is scanned next
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC, new CSXToken(Pos));
          }
        case 109: break;
        case 62: 
          { //Reserved word RETURN, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos));
          }
        case 110: break;
        case 47: 
          { //Reserved word READ, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_READ,
			new CSXToken(Pos));
          }
        case 111: break;
        case 31: 
          { //Reserved word IF, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_IF,
			new CSXToken(Pos));
          }
        case 112: break;
        case 59: 
          { //Reserved word CLASS, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos));
          }
        case 113: break;
        case 37: 
          { // Match != (not equal) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOTEQ, new CSXToken(Pos));
          }
        case 114: break;
        case 61: 
          { //Reserved word PRINT, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos));
          }
        case 115: break;
        case 9: 
          { // Match on = (assignment) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.ASG, new CSXToken(Pos));
          }
        case 116: break;
        case 16: 
          { // Match on ; (semicolon/statement termination)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SEMI, new CSXToken(Pos));
          }
        case 117: break;
        case 25: 
          { //Tab non-printable character
	Pos.setpos();
    yybegin(YYINITIAL);
    Pos.col += 1;
          }
        case 118: break;
        case 17: 
          { // Match on : (colon/seperator)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COLON, new CSXToken(Pos));
          }
        case 119: break;
        case 4: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	
	String parsedString = yytext();
	Pos.col += parsedString.length();
	
	//Same idea as float, replace tilde with java recognizable negation symbol
	parsedString = parsedString.replace('~', '-');

	try{
		//If Integer.parseInt() throws a number format exception, because our rule only finds
		//a valid integer format, the exception must be due to an overflow error.
		//If not, return an INTLITToken with that integer as the value
		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.parseInt(parsedString), Pos));

	} catch (NumberFormatException e) {
		
		//Print the error and return an IntLitToken with Integer.MAX_VALUE as the value
		System.out.println("Overflow Error");
		System.out.println(e.getMessage());

		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.MAX_VALUE, Pos));
	}
          }
        case 120: break;
        case 29: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	String parsedString = yytext();
	Pos.col += parsedString.length();
	
	//If a tilde was found in parse string, this is supposed to be a negative number.
	//Replace the tilde with a java recognizable symbol for negation
	parsedString = parsedString.replace('~', '-');
	
	//Float.Parse() will return back negative or positive infinity on overflow
    float parsedFloat = Float.parseFloat(parsedString);
    if(parsedFloat == Float.NEGATIVE_INFINITY || parsedFloat == Float.POSITIVE_INFINITY)
    {
		//Print error, but return Float.MAX_VALUE
		System.out.println("Float Overflow Error");

		return new Symbol(sym.FLOATLIT,
				new CSXFloatLitToken(Float.MAX_VALUE, Pos));
    }
    else
    {
    	//No overflow? Return a FloatLitToken with the parsed float as the value
		return new Symbol(sym.FLOATLIT,
			new CSXFloatLitToken(parsedFloat, Pos));
	}
          }
        case 121: break;
        case 33: 
          { // Match && (boolean and) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.CAND,
			new CSXToken(Pos));
          }
        case 122: break;
        case 53: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { //If we find an increment, and we look ahead and find a reserved word, return an error token so that we don't mistake
	//the reserved word as an identifier in the rule below
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"++\" operator without a matching identifier", Pos));
          }
        case 123: break;
        case 50: 
          { //Reserved word BOOL, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos));
          }
        case 124: break;
        case 19: 
          { // Match on { (begin scope) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACKET, new CSXToken(Pos));
          }
        case 125: break;
        case 20: 
          { // Match on } (close scope) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RBRACKET, new CSXToken(Pos));
          }
        case 126: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	//When jFlex see the EOF token, return back an EOF token so we can stop scanning
	return new Symbol(sym.EOF, new CSXToken(0,0));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
