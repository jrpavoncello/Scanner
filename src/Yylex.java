/* The following code was generated by JFlex 1.4.3 on 10/6/15 4:45 PM */

class CSXToken
{
	int linenum;
	int colnum;

	CSXToken()
	{

	}

	CSXToken(int line,int col)
	{
		linenum = line;
		colnum = col;
	}

	CSXToken(Position p)
	{
		linenum = p.linenum;
		colnum = p.colnum;

	}

}

class CSXIntLitToken extends CSXToken
{
	int intValue;
	CSXIntLitToken(int val, Position p)
	{
		super(p);
		intValue=val;
	}
}

class CSXFloatLitToken extends CSXToken
{
	float floatValue;
	CSXFloatLitToken(float val, Position p)
	{
		super(p);
		floatValue = val;
	}
}

class CSXIdentifierToken extends CSXToken
{
	String identifierValue;
	CSXIdentifierToken(String val, Position p)
	{
		super(p);
		identifierValue = val;
	}

}

class CSXCharLitToken extends CSXToken
{
	char charValue;
	CSXCharLitToken(char val, Position p)
	{
		super(p);
		charValue = val;
	}
}

class CSXStringLitToken extends CSXToken
{
	String stringValue;
	CSXStringLitToken(String val, Position p)
	{
		super(p);
		stringValue = val;
	}
}

class CSXErrorToken extends CSXToken
{
	String error;
	CSXErrorToken(String errorMessage, Position p)
	{
		super(p);
		error = errorMessage;
	}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Position
{
	int  linenum; 			/* maintain this as line number current token was scanned on */
	int  colnum; 			/* maintain this as column number current token began at */
	int  line; 				/* maintain this as line number after scanning current token  */
	int  col; 				/* maintain this as column number after scanning current token  */
	Position()
	{
		linenum = 1;
		colnum = 1;
		line = 1;
		col = 1;
	}
	void setpos()
	{ // set starting position for current token
		linenum = line;
		colnum = col;
	}
} ;


//This class is used by the scanner to return token information that is useful for the parser
//This class will be replaced in our parser project by the java_cup.runtime.Symbol class
class Symbol
{
	public int sym;
	public CSXToken value;
	public Symbol(int tokenType, CSXToken theToken)
	{
		sym = tokenType;
		value = theToken;
	}
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/6/15 4:45 PM from the specification file
 * <tt>/Users/christopherenck/Documents/Scanner/src/csx.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FoundIdentifierMatch = 6;
  public static final int FoundIncOrDec = 4;
  public static final int FoundIdentifier = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\3\2\0\1\4\22\0\1\7\1\51\1\6\1\1"+
    "\2\0\1\45\1\43\1\64\1\65\1\54\1\52\1\57\1\53\1\0"+
    "\1\2\12\5\1\56\1\55\1\50\1\46\1\47\2\0\1\23\1\31"+
    "\1\32\1\40\1\14\1\17\1\13\1\26\1\27\1\13\1\42\1\20"+
    "\1\13\1\33\1\22\1\41\1\13\1\36\1\35\1\24\1\34\1\37"+
    "\1\25\2\13\1\13\1\62\1\10\1\63\1\0\1\15\1\0\1\23"+
    "\1\31\1\32\1\40\1\30\1\16\1\13\1\26\1\27\1\13\1\42"+
    "\1\20\1\13\1\11\1\21\1\41\1\13\1\36\1\35\1\12\1\34"+
    "\1\37\1\25\3\13\1\60\1\44\1\61\1\66\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\0\1\3\1\0\1\4\13\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\0\1\27\1\13\1\14\12\5\1\30"+
    "\2\0\1\31\1\0\7\5\1\32\10\5\2\0\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\5\5\1\45\10\5\1\30\1\0\2\46\5\5"+
    "\1\47\11\5\1\50\13\51\13\52\13\5\1\53\1\54"+
    "\1\55\3\5\1\56\4\5\1\57\1\5\1\60\1\61"+
    "\1\5\6\51\1\62\10\51\6\52\1\63\10\52\4\5"+
    "\1\64\1\65\1\66\1\67\1\70\1\5\1\71\1\5"+
    "\1\72\13\51\13\52\3\5\1\73\4\51\4\52\1\5"+
    "\2\51\2\52\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0150\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0150"+
    "\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u01c0\0\u0150\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0230\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0150\0\u0150"+
    "\0\u0150\0\u0150\0\u0150\0\u0150\0\u0e00\0\u0e38\0\u0e00\0\u0e38"+
    "\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0230\0\u0f88\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\250\0\u1148"+
    "\0\u0150\0\u09a0\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u0230"+
    "\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u0150\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8"+
    "\0\u1b20\0\u1b58\0\u1b90\0\u1148\0\u0230\0\u0230\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u0230\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u0230\0\u1d50"+
    "\0\u0230\0\u0230\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1490\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8"+
    "\0\u16f8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u0230\0\u0230\0\u0230"+
    "\0\u0230\0\u0230\0\u24c0\0\u0230\0\u24f8\0\u0230\0\u2530\0\u2568"+
    "\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728"+
    "\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8"+
    "\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u0230"+
    "\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u0230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\0\1\14\1\15\1\14\1\16\1\0\2\17\4\14"+
    "\1\15\1\20\1\14\1\21\1\16\1\22\1\23\3\14"+
    "\1\24\1\25\1\14\1\26\1\14\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\0\1\14\1\15\1\14\1\16\1\0"+
    "\2\17\4\14\1\15\1\20\1\14\1\21\1\16\1\22"+
    "\1\23\3\14\1\24\1\25\1\14\1\26\1\14\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\54\1\55"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\11\0\1\14\1\56\1\14"+
    "\1\57\1\0\2\60\4\14\1\56\1\61\1\14\1\62"+
    "\1\57\1\63\1\64\3\14\1\65\1\66\1\14\1\67"+
    "\1\14\36\0\4\70\1\0\25\70\26\0\1\71\70\0"+
    "\1\72\160\0\1\7\71\0\1\11\62\0\6\12\1\73"+
    "\1\0\1\74\57\12\5\0\1\75\3\0\4\14\1\75"+
    "\25\14\32\0\1\75\3\0\4\14\1\75\20\14\1\76"+
    "\4\14\32\0\1\75\3\0\4\14\1\75\2\14\1\77"+
    "\22\14\32\0\1\75\3\0\4\14\1\75\2\14\1\100"+
    "\2\14\1\101\17\14\32\0\1\75\3\0\4\14\1\75"+
    "\10\14\1\102\14\14\32\0\1\75\3\0\1\103\3\14"+
    "\1\75\2\104\13\14\1\103\7\14\32\0\1\75\3\0"+
    "\4\14\1\75\3\14\2\105\13\14\1\106\4\14\32\0"+
    "\1\75\3\0\4\14\1\75\2\14\1\107\2\110\3\14"+
    "\1\111\14\14\32\0\1\75\3\0\3\14\1\112\1\75"+
    "\12\14\1\112\12\14\32\0\1\75\3\0\4\14\1\75"+
    "\3\14\2\113\20\14\32\0\1\75\3\0\4\14\1\75"+
    "\20\14\1\114\4\14\35\0\1\115\4\116\1\0\25\116"+
    "\71\0\1\117\70\0\1\120\70\0\1\121\67\0\1\122"+
    "\67\0\1\123\67\0\1\124\73\0\1\125\70\0\1\126"+
    "\66\0\1\127\70\0\1\130\21\0\1\75\3\0\4\14"+
    "\1\75\20\14\1\131\4\14\32\0\1\75\3\0\4\14"+
    "\1\75\2\14\1\132\22\14\32\0\1\75\3\0\4\14"+
    "\1\75\2\14\1\133\2\14\1\57\17\14\32\0\1\75"+
    "\3\0\4\14\1\75\10\14\1\134\14\14\32\0\1\75"+
    "\3\0\1\135\3\14\1\75\2\136\13\14\1\135\7\14"+
    "\32\0\1\75\3\0\4\14\1\75\3\14\2\137\13\14"+
    "\1\140\4\14\32\0\1\75\3\0\4\14\1\75\2\14"+
    "\1\141\2\142\3\14\1\143\14\14\32\0\1\75\3\0"+
    "\3\14\1\144\1\75\12\14\1\144\12\14\32\0\1\75"+
    "\3\0\4\14\1\75\3\14\2\145\20\14\32\0\1\75"+
    "\3\0\4\14\1\75\20\14\1\146\4\14\32\0\1\147"+
    "\3\0\4\70\1\147\25\70\25\0\1\71\1\150\66\71"+
    "\3\72\1\151\1\152\7\72\1\152\2\72\1\152\2\72"+
    "\1\152\24\72\2\152\17\72\6\0\1\12\67\0\1\12"+
    "\1\0\3\12\66\0\4\14\1\0\25\14\32\0\1\75"+
    "\3\0\4\14\1\75\16\14\1\153\6\14\32\0\1\75"+
    "\3\0\4\14\1\75\17\14\1\154\5\14\32\0\1\75"+
    "\3\0\4\14\1\75\3\14\2\155\20\14\32\0\1\75"+
    "\3\0\4\14\1\75\2\14\1\156\22\14\32\0\1\75"+
    "\3\0\4\14\1\75\11\14\1\157\13\14\32\0\1\75"+
    "\3\0\1\14\1\160\2\14\1\75\6\14\1\160\16\14"+
    "\32\0\1\75\3\0\4\14\1\75\3\14\2\161\20\14"+
    "\32\0\1\75\3\0\3\14\1\162\1\75\12\14\1\162"+
    "\12\14\32\0\1\75\3\0\4\14\1\75\5\14\1\163"+
    "\17\14\32\0\1\75\3\0\1\164\3\14\1\75\15\14"+
    "\1\164\7\14\32\0\1\75\3\0\4\14\1\75\5\14"+
    "\1\165\17\14\32\0\1\75\3\0\1\14\1\166\2\14"+
    "\1\75\5\14\1\167\1\166\16\14\32\0\1\75\3\0"+
    "\4\14\1\75\11\14\1\170\13\14\32\0\1\75\3\0"+
    "\4\14\1\75\11\14\1\171\13\14\33\0\1\116\1\0"+
    "\3\116\11\0\1\116\6\0\1\116\2\0\1\116\4\0"+
    "\1\116\67\0\1\172\35\0\1\173\1\174\1\173\1\175"+
    "\1\0\2\176\4\173\1\174\1\177\1\173\1\200\1\175"+
    "\1\201\1\202\3\173\1\203\1\204\1\173\1\205\1\173"+
    "\36\0\1\206\1\207\1\206\1\210\1\0\2\211\4\206"+
    "\1\207\1\212\1\206\1\213\1\210\1\214\1\215\3\206"+
    "\1\216\1\217\1\206\1\220\1\206\32\0\1\75\3\0"+
    "\4\14\1\75\16\14\1\221\6\14\32\0\1\75\3\0"+
    "\4\14\1\75\17\14\1\221\5\14\32\0\1\75\3\0"+
    "\4\14\1\75\3\14\2\222\20\14\32\0\1\75\3\0"+
    "\4\14\1\75\11\14\1\223\13\14\32\0\1\75\3\0"+
    "\1\14\1\136\2\14\1\75\6\14\1\136\16\14\32\0"+
    "\1\75\3\0\4\14\1\75\3\14\2\224\20\14\32\0"+
    "\1\75\3\0\3\14\1\225\1\75\12\14\1\225\12\14"+
    "\32\0\1\75\3\0\4\14\1\75\5\14\1\226\17\14"+
    "\32\0\1\75\3\0\1\227\3\14\1\75\15\14\1\227"+
    "\7\14\32\0\1\75\3\0\4\14\1\75\5\14\1\230"+
    "\17\14\32\0\1\75\3\0\1\14\1\231\2\14\1\75"+
    "\5\14\1\232\1\231\16\14\32\0\1\75\3\0\4\14"+
    "\1\75\11\14\1\232\13\14\32\0\1\75\3\0\4\14"+
    "\1\75\11\14\1\233\13\14\25\0\1\71\1\234\66\71"+
    "\5\0\1\75\3\0\3\14\1\235\1\75\12\14\1\235"+
    "\12\14\32\0\1\75\3\0\3\14\1\236\1\75\12\14"+
    "\1\236\12\14\32\0\1\75\3\0\4\14\1\75\5\14"+
    "\1\237\17\14\32\0\1\75\3\0\4\14\1\75\17\14"+
    "\1\240\5\14\32\0\1\75\3\0\4\14\1\75\2\14"+
    "\1\241\22\14\32\0\1\75\3\0\4\14\1\75\2\14"+
    "\1\242\22\14\32\0\1\75\3\0\4\14\1\75\5\14"+
    "\1\243\17\14\32\0\1\75\3\0\4\14\1\75\17\14"+
    "\1\244\5\14\32\0\1\75\3\0\1\14\1\245\2\14"+
    "\1\75\6\14\1\245\10\14\1\246\5\14\32\0\1\75"+
    "\3\0\4\14\1\75\20\14\1\247\4\14\32\0\1\75"+
    "\3\0\4\14\1\75\16\14\1\250\6\14\32\0\1\75"+
    "\3\0\4\14\1\75\22\14\1\251\2\14\32\0\1\75"+
    "\3\0\4\14\1\75\22\14\1\252\2\14\32\0\1\75"+
    "\3\0\1\253\3\14\1\75\15\14\1\253\7\14\32\0"+
    "\1\254\3\0\4\173\1\254\25\173\32\0\1\254\3\0"+
    "\4\173\1\254\20\173\1\255\4\173\32\0\1\254\3\0"+
    "\4\173\1\254\2\173\1\256\22\173\32\0\1\254\3\0"+
    "\4\173\1\254\2\173\1\257\2\173\1\175\17\173\32\0"+
    "\1\254\3\0\4\173\1\254\10\173\1\260\14\173\32\0"+
    "\1\254\3\0\1\261\3\173\1\254\2\262\13\173\1\261"+
    "\7\173\32\0\1\254\3\0\4\173\1\254\3\173\2\263"+
    "\13\173\1\264\4\173\32\0\1\254\3\0\4\173\1\254"+
    "\2\173\1\265\2\266\3\173\1\267\14\173\32\0\1\254"+
    "\3\0\3\173\1\270\1\254\12\173\1\270\12\173\32\0"+
    "\1\254\3\0\4\173\1\254\3\173\2\271\20\173\32\0"+
    "\1\254\3\0\4\173\1\254\20\173\1\272\4\173\32\0"+
    "\1\273\3\0\4\206\1\273\25\206\32\0\1\273\3\0"+
    "\4\206\1\273\20\206\1\274\4\206\32\0\1\273\3\0"+
    "\4\206\1\273\2\206\1\275\22\206\32\0\1\273\3\0"+
    "\4\206\1\273\2\206\1\276\2\206\1\210\17\206\32\0"+
    "\1\273\3\0\4\206\1\273\10\206\1\277\14\206\32\0"+
    "\1\273\3\0\1\300\3\206\1\273\2\301\13\206\1\300"+
    "\7\206\32\0\1\273\3\0\4\206\1\273\3\206\2\302"+
    "\13\206\1\303\4\206\32\0\1\273\3\0\4\206\1\273"+
    "\2\206\1\304\2\305\3\206\1\306\14\206\32\0\1\273"+
    "\3\0\3\206\1\307\1\273\12\206\1\307\12\206\32\0"+
    "\1\273\3\0\4\206\1\273\3\206\2\310\20\206\32\0"+
    "\1\273\3\0\4\206\1\273\20\206\1\311\4\206\32\0"+
    "\1\75\3\0\3\14\1\136\1\75\12\14\1\136\12\14"+
    "\32\0\1\75\3\0\4\14\1\75\5\14\1\135\17\14"+
    "\32\0\1\75\3\0\4\14\1\75\2\14\1\221\22\14"+
    "\32\0\1\75\3\0\4\14\1\75\2\14\1\136\22\14"+
    "\32\0\1\75\3\0\4\14\1\75\5\14\1\312\17\14"+
    "\32\0\1\75\3\0\4\14\1\75\17\14\1\313\5\14"+
    "\32\0\1\75\3\0\1\14\1\314\2\14\1\75\6\14"+
    "\1\314\10\14\1\135\5\14\32\0\1\75\3\0\4\14"+
    "\1\75\20\14\1\136\4\14\32\0\1\75\3\0\4\14"+
    "\1\75\16\14\1\315\6\14\32\0\1\75\3\0\4\14"+
    "\1\75\22\14\1\136\2\14\32\0\1\75\3\0\1\135"+
    "\3\14\1\75\15\14\1\135\7\14\32\0\1\75\3\0"+
    "\1\14\1\316\2\14\1\75\6\14\1\316\16\14\32\0"+
    "\1\75\3\0\3\14\1\317\1\75\12\14\1\317\12\14"+
    "\32\0\1\75\3\0\3\14\1\320\1\75\12\14\1\320"+
    "\12\14\32\0\1\75\3\0\4\14\1\75\24\14\1\321"+
    "\32\0\1\75\3\0\4\14\1\75\17\14\1\322\5\14"+
    "\32\0\1\75\3\0\4\14\1\75\11\14\1\323\13\14"+
    "\32\0\1\75\3\0\1\14\1\324\2\14\1\75\6\14"+
    "\1\324\16\14\32\0\1\75\3\0\4\14\1\75\20\14"+
    "\1\325\4\14\32\0\1\75\3\0\1\14\1\326\2\14"+
    "\1\75\6\14\1\326\16\14\36\0\4\173\1\0\25\173"+
    "\32\0\1\254\3\0\4\173\1\254\16\173\1\327\6\173"+
    "\32\0\1\254\3\0\4\173\1\254\17\173\1\327\5\173"+
    "\32\0\1\254\3\0\4\173\1\254\3\173\2\330\20\173"+
    "\32\0\1\254\3\0\4\173\1\254\11\173\1\331\13\173"+
    "\32\0\1\254\3\0\1\173\1\262\2\173\1\254\6\173"+
    "\1\262\16\173\32\0\1\254\3\0\4\173\1\254\3\173"+
    "\2\332\20\173\32\0\1\254\3\0\3\173\1\333\1\254"+
    "\12\173\1\333\12\173\32\0\1\254\3\0\4\173\1\254"+
    "\5\173\1\334\17\173\32\0\1\254\3\0\1\335\3\173"+
    "\1\254\15\173\1\335\7\173\32\0\1\254\3\0\4\173"+
    "\1\254\5\173\1\336\17\173\32\0\1\254\3\0\1\173"+
    "\1\337\2\173\1\254\5\173\1\340\1\337\16\173\32\0"+
    "\1\254\3\0\4\173\1\254\11\173\1\340\13\173\32\0"+
    "\1\254\3\0\4\173\1\254\11\173\1\341\13\173\36\0"+
    "\4\206\1\0\25\206\32\0\1\273\3\0\4\206\1\273"+
    "\16\206\1\342\6\206\32\0\1\273\3\0\4\206\1\273"+
    "\17\206\1\342\5\206\32\0\1\273\3\0\4\206\1\273"+
    "\3\206\2\343\20\206\32\0\1\273\3\0\4\206\1\273"+
    "\11\206\1\344\13\206\32\0\1\273\3\0\1\206\1\301"+
    "\2\206\1\273\6\206\1\301\16\206\32\0\1\273\3\0"+
    "\4\206\1\273\3\206\2\345\20\206\32\0\1\273\3\0"+
    "\3\206\1\346\1\273\12\206\1\346\12\206\32\0\1\273"+
    "\3\0\4\206\1\273\5\206\1\347\17\206\32\0\1\273"+
    "\3\0\1\350\3\206\1\273\15\206\1\350\7\206\32\0"+
    "\1\273\3\0\4\206\1\273\5\206\1\351\17\206\32\0"+
    "\1\273\3\0\1\206\1\352\2\206\1\273\5\206\1\353"+
    "\1\352\16\206\32\0\1\273\3\0\4\206\1\273\11\206"+
    "\1\353\13\206\32\0\1\273\3\0\4\206\1\273\11\206"+
    "\1\354\13\206\32\0\1\75\3\0\4\14\1\75\24\14"+
    "\1\136\32\0\1\75\3\0\4\14\1\75\17\14\1\136"+
    "\5\14\32\0\1\75\3\0\4\14\1\75\11\14\1\355"+
    "\13\14\32\0\1\75\3\0\4\14\1\75\20\14\1\356"+
    "\4\14\32\0\1\75\3\0\1\357\3\14\1\75\15\14"+
    "\1\357\7\14\32\0\1\75\3\0\1\360\3\14\1\75"+
    "\15\14\1\360\7\14\32\0\1\254\3\0\3\173\1\262"+
    "\1\254\12\173\1\262\12\173\32\0\1\254\3\0\4\173"+
    "\1\254\5\173\1\261\17\173\32\0\1\254\3\0\4\173"+
    "\1\254\2\173\1\327\22\173\32\0\1\254\3\0\4\173"+
    "\1\254\2\173\1\262\22\173\32\0\1\254\3\0\4\173"+
    "\1\254\5\173\1\361\17\173\32\0\1\254\3\0\4\173"+
    "\1\254\17\173\1\362\5\173\32\0\1\254\3\0\1\173"+
    "\1\363\2\173\1\254\6\173\1\363\10\173\1\261\5\173"+
    "\32\0\1\254\3\0\4\173\1\254\20\173\1\262\4\173"+
    "\32\0\1\254\3\0\4\173\1\254\16\173\1\364\6\173"+
    "\32\0\1\254\3\0\4\173\1\254\22\173\1\262\2\173"+
    "\32\0\1\254\3\0\1\261\3\173\1\254\15\173\1\261"+
    "\7\173\32\0\1\273\3\0\3\206\1\301\1\273\12\206"+
    "\1\301\12\206\32\0\1\273\3\0\4\206\1\273\5\206"+
    "\1\300\17\206\32\0\1\273\3\0\4\206\1\273\2\206"+
    "\1\342\22\206\32\0\1\273\3\0\4\206\1\273\2\206"+
    "\1\301\22\206\32\0\1\273\3\0\4\206\1\273\5\206"+
    "\1\365\17\206\32\0\1\273\3\0\4\206\1\273\17\206"+
    "\1\366\5\206\32\0\1\273\3\0\1\206\1\367\2\206"+
    "\1\273\6\206\1\367\10\206\1\300\5\206\32\0\1\273"+
    "\3\0\4\206\1\273\20\206\1\301\4\206\32\0\1\273"+
    "\3\0\4\206\1\273\16\206\1\370\6\206\32\0\1\273"+
    "\3\0\4\206\1\273\22\206\1\301\2\206\32\0\1\273"+
    "\3\0\1\300\3\206\1\273\15\206\1\300\7\206\32\0"+
    "\1\75\3\0\1\131\3\14\1\75\15\14\1\131\7\14"+
    "\32\0\1\75\3\0\1\136\3\14\1\75\15\14\1\136"+
    "\7\14\32\0\1\75\3\0\4\14\1\75\16\14\1\371"+
    "\6\14\32\0\1\254\3\0\4\173\1\254\24\173\1\262"+
    "\32\0\1\254\3\0\4\173\1\254\17\173\1\262\5\173"+
    "\32\0\1\254\3\0\4\173\1\254\11\173\1\372\13\173"+
    "\32\0\1\254\3\0\4\173\1\254\20\173\1\373\4\173"+
    "\32\0\1\273\3\0\4\206\1\273\24\206\1\301\32\0"+
    "\1\273\3\0\4\206\1\273\17\206\1\301\5\206\32\0"+
    "\1\273\3\0\4\206\1\273\11\206\1\374\13\206\32\0"+
    "\1\273\3\0\4\206\1\273\20\206\1\375\4\206\32\0"+
    "\1\75\3\0\3\14\1\376\1\75\12\14\1\376\12\14"+
    "\32\0\1\254\3\0\1\255\3\173\1\254\15\173\1\255"+
    "\7\173\32\0\1\254\3\0\1\262\3\173\1\254\15\173"+
    "\1\262\7\173\32\0\1\273\3\0\1\274\3\206\1\273"+
    "\15\206\1\274\7\206\32\0\1\273\3\0\1\301\3\206"+
    "\1\273\15\206\1\301\7\206\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11648];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\1\11\1\0\1\1\1\0\1\11\14\1"+
    "\2\0\6\1\12\11\1\0\1\11\15\1\2\0\1\1"+
    "\1\0\20\1\2\0\6\11\23\1\1\0\1\11\20\1"+
    "\1\11\204\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
Position Pos = new Position();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 57: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONST,
			new CSXToken(Pos));
          }
        case 61: break;
        case 25: 
          { Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.STRLIT,
			new CSXStringLitToken(yytext(), Pos));
          }
        case 62: break;
        case 18: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.RBRACKET,
			new CSXToken(Pos));
          }
        case 63: break;
        case 21: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LPAREN,
			new CSXToken(Pos));
          }
        case 64: break;
        case 58: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos));
          }
        case 65: break;
        case 48: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_READ,
			new CSXToken(Pos));
          }
        case 66: break;
        case 49: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_VOID,
			new CSXToken(Pos));
          }
        case 67: break;
        case 4: 
          { yybegin(YYINITIAL);
	Pos.col += 1;
          }
        case 68: break;
        case 29: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.EQ,
			new CSXToken(Pos));
          }
        case 69: break;
        case 54: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos));
          }
        case 70: break;
        case 53: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos));
          }
        case 71: break;
        case 40: 
          { Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.CHARLIT,
			new CSXCharLitToken(yycharat(Pos.col), Pos));
          }
        case 72: break;
        case 32: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOTEQ,
			new CSXToken(Pos));
          }
        case 73: break;
        case 44: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos));
          }
        case 74: break;
        case 5: 
          { yybegin(FoundIdentifier);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 75: break;
        case 30: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.GEQ,
new CSXToken(Pos));
          }
        case 76: break;
        case 38: 
          { System.out.println(yytext());
    Pos.setpos();
    Pos.col += yytext().length();
          }
        case 77: break;
        case 36: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC,
			new CSXToken(Pos));
          }
        case 78: break;
        case 55: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos));
          }
        case 79: break;
        case 22: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RPAREN,
			new CSXToken(Pos));
          }
        case 80: break;
        case 43: 
          { System.out.println(yytext());
	Pos.setpos();
	Pos.col += yytext().length();
          }
        case 81: break;
        case 13: 
          { Pos.setpos();
Pos.col = yytext().length();
return new Symbol(sym.TIMES,
new CSXToken(Pos));
          }
        case 82: break;
        case 39: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_INT,
			new CSXToken(Pos));
          }
        case 83: break;
        case 3: 
          { //  BOOL negFlag = False;

   // if(yycharat(Pos.col)){


//    }

	Pos.setpos();
	Pos.col += yytext().length();

	try{
		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.parseInt(yytext()), Pos));

	} catch (NumberFormatException e) {

		System.out.println("Overflow Error");
		System.out.println(e.getMessage());

		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.MAX_VALUE, Pos));
	}
          }
        case 84: break;
        case 27: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COR,
			new CSXToken(Pos));
          }
        case 85: break;
        case 2: 
          { yybegin(YYINITIAL);
	Pos.line += 1;
	Pos.col = 1;
          }
        case 86: break;
        case 23: 
          { yybegin(YYINITIAL);
    Pos.col = 4;
          }
        case 87: break;
        case 42: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC,
			new CSXToken(Pos));
          }
        case 88: break;
        case 31: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.LEQ,
new CSXToken(Pos));
          }
        case 89: break;
        case 52: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FLOAT,
			new CSXToken(Pos));
          }
        case 90: break;
        case 28: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.CAND,
			new CSXToken(Pos));
          }
        case 91: break;
        case 50: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"++\" operator", Pos));
          }
        case 92: break;
        case 16: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COMMA,
			new CSXToken(Pos));
          }
        case 93: break;
        case 10: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOT,
			new CSXToken(Pos));
          }
        case 94: break;
        case 1: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.SLASH,
			new CSXToken(Pos));
          }
        case 95: break;
        case 33: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"++\" operator", Pos));
          }
        case 96: break;
        case 6: 
          { Pos.setpos();
Pos.col += yytext().length();
          }
        case 97: break;
        case 7: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.ASG,
			new CSXToken(Pos));
          }
        case 98: break;
        case 35: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC,
			new CSXToken(Pos));
          }
        case 99: break;
        case 47: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos));
          }
        case 100: break;
        case 51: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"--\" operator", Pos));
          }
        case 101: break;
        case 59: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos));
          }
        case 102: break;
        case 19: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACE,
			new CSXToken(Pos));
          }
        case 103: break;
        case 37: 
          { Pos.setpos();
	Pos.col += yytext().length();
	yybegin(YYINITIAL);
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word '" +  yytext() + "' after an Increment or Decrement operator, expected an identifier.", Pos));
          }
        case 104: break;
        case 34: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"--\" operator", Pos));
          }
        case 105: break;
        case 11: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.PLUS,
			new CSXToken(Pos));
          }
        case 106: break;
        case 12: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.MINUS,
			new CSXToken(Pos));
          }
        case 107: break;
        case 8: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.GT,
new CSXToken(Pos));
          }
        case 108: break;
        case 41: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC,
			new CSXToken(Pos));
          }
        case 109: break;
        case 45: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos));
          }
        case 110: break;
        case 26: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.rw_IF,
			new CSXToken(Pos));
          }
        case 111: break;
        case 24: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 112: break;
        case 9: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.LT,
new CSXToken(Pos));
          }
        case 113: break;
        case 15: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COLON,
			new CSXToken(Pos));
          }
        case 114: break;
        case 14: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SEMI,
			new CSXToken(Pos));
          }
        case 115: break;
        case 17: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACKET,
			new CSXToken(Pos));
          }
        case 116: break;
        case 20: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.RBRACE,
			new CSXToken(Pos));
          }
        case 117: break;
        case 56: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos));
          }
        case 118: break;
        case 46: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos));
          }
        case 119: break;
        case 60: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos));
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(sym.EOF, new CSXToken(0,0));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
