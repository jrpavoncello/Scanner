/* The following code was generated by JFlex 1.4.3 on 10/6/15 6:20 PM */

class CSXToken
{
	int linenum;
	int colnum;

	CSXToken()
	{

	}

	CSXToken(int line,int col)
	{
		linenum = line;
		colnum = col;
	}

	CSXToken(Position p)
	{
		linenum = p.linenum;
		colnum = p.colnum;

	}

}

class CSXIntLitToken extends CSXToken
{
	int intValue;
	CSXIntLitToken(int val, Position p)
	{
		super(p);
		intValue=val;
	}
}

class CSXFloatLitToken extends CSXToken
{
	float floatValue;
	CSXFloatLitToken(float val, Position p)
	{
		super(p);
		floatValue = val;
	}
}

class CSXIdentifierToken extends CSXToken
{
	String identifierValue;
	CSXIdentifierToken(String val, Position p)
	{
		super(p);
		identifierValue = val;
	}

}

class CSXCharLitToken extends CSXToken
{
	char charValue;
	CSXCharLitToken(char val, Position p)
	{
		super(p);
		charValue = val;
	}
}

class CSXStringLitToken extends CSXToken
{
	String stringValue;
	CSXStringLitToken(String val, Position p)
	{
		super(p);
		stringValue = val;
	}
}

class CSXErrorToken extends CSXToken
{
	String error;
	CSXErrorToken(String errorMessage, Position p)
	{
		super(p);
		error = errorMessage;
	}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Position
{
	int  linenum; 			/* maintain this as line number current token was scanned on */
	int  colnum; 			/* maintain this as column number current token began at */
	int  line; 				/* maintain this as line number after scanning current token  */
	int  col; 				/* maintain this as column number after scanning current token  */
	Position()
	{
		linenum = 1;
		colnum = 1;
		line = 1;
		col = 1;
	}
	void setpos()
	{ // set starting position for current token
		linenum = line;
		colnum = col;
	}
} ;


//This class is used by the scanner to return token information that is useful for the parser
//This class will be replaced in our parser project by the java_cup.runtime.Symbol class
class Symbol
{
	public int sym;
	public CSXToken value;
	public Symbol(int tokenType, CSXToken theToken)
	{
		sym = tokenType;
		value = theToken;
	}
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/6/15 6:20 PM from the specification file
 * <tt>D:/dev/Java/Scanner/src/csx.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FoundIdentifierMatch = 6;
  public static final int FoundIncOrDec = 4;
  public static final int FoundIdentifier = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\3\2\0\1\4\22\0\1\7\1\46\1\6\1\1"+
    "\2\0\1\42\1\40\1\61\1\62\1\51\1\47\1\54\1\50\1\64"+
    "\1\2\12\5\1\53\1\52\1\45\1\43\1\44\2\0\1\20\1\26"+
    "\1\27\1\35\1\25\1\15\1\13\1\23\1\24\1\13\1\37\1\16"+
    "\1\13\1\30\1\17\1\36\1\13\1\33\1\32\1\21\1\31\1\34"+
    "\1\22\2\13\1\13\1\57\1\10\1\60\1\0\1\14\1\0\1\20"+
    "\1\26\1\27\1\35\1\25\1\15\1\13\1\23\1\24\1\13\1\37"+
    "\1\16\1\13\1\11\1\17\1\36\1\13\1\33\1\32\1\12\1\31"+
    "\1\34\1\22\3\13\1\55\1\41\1\56\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\0\1\3\1\0\1\4\13\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\0\1\27\1\13\1\14\12\5\1\30"+
    "\1\0\1\31\1\32\1\0\6\5\1\33\11\5\2\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\4\5\1\47\11\5\1\30\1\0"+
    "\1\31\4\5\1\50\12\5\1\51\13\52\13\53\13\5"+
    "\1\54\1\55\3\5\1\56\1\57\4\5\1\60\1\5"+
    "\1\61\1\62\1\5\5\52\1\63\11\52\5\53\1\64"+
    "\11\53\4\5\1\65\1\66\1\67\1\70\1\71\1\5"+
    "\1\72\1\5\1\73\13\52\13\53\3\5\1\74\4\52"+
    "\4\53\1\5\2\52\2\53\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u0144\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0144"+
    "\0\u0144\0\u0144\0\u0144\0\u0144\0\u0144\0\u0144\0\u0144\0\u0144"+
    "\0\u0144\0\u01b0\0\u0654\0\u0144\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u021c\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0144"+
    "\0\u0144\0\u0144\0\u0144\0\u0144\0\u0144\0\u0db6\0\u0dec\0\u0654"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u021c\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\242\0\u10e0\0\u0144\0\u1116\0\u114c\0\u1182\0\u11b8\0\u021c"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368"+
    "\0\u139e\0\u13d4\0\u0144\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u10e0\0\u021c\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u021c\0\u021c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u021c"+
    "\0\u1c7a\0\u021c\0\u021c\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u140a\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02"+
    "\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2"+
    "\0\u165c\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u021c\0\u021c"+
    "\0\u021c\0\u021c\0\u021c\0\u23a6\0\u021c\0\u23dc\0\u021c\0\u2412"+
    "\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2"+
    "\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772"+
    "\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922"+
    "\0\u021c\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c"+
    "\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u021c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\0\1\14\1\15\1\14\1\0\1\16\3\14\1\15"+
    "\1\17\1\14\1\20\1\21\1\22\1\23\3\14\1\24"+
    "\1\25\1\14\1\26\1\14\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\0\1\14\1\15\1\14\1\0\1\16"+
    "\3\14\1\15\1\17\1\14\1\20\1\21\1\22\1\23"+
    "\3\14\1\24\1\25\1\14\1\26\1\14\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\55\1\56\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\11\0\1\14\1\57\1\14"+
    "\1\0\1\60\3\14\1\57\1\61\1\14\1\62\1\63"+
    "\1\64\1\65\3\14\1\66\1\67\1\14\1\70\1\14"+
    "\37\0\3\71\1\0\23\71\27\0\1\72\66\0\1\73"+
    "\154\0\1\7\67\0\1\11\56\0\1\53\1\0\6\12"+
    "\1\74\1\12\1\75\55\12\5\0\1\76\3\0\3\14"+
    "\1\76\23\14\33\0\1\76\3\0\3\14\1\76\16\14"+
    "\1\77\4\14\33\0\1\76\3\0\3\14\1\76\1\14"+
    "\1\100\1\14\1\101\17\14\33\0\1\76\3\0\3\14"+
    "\1\76\6\14\1\102\14\14\33\0\1\76\3\0\1\103"+
    "\2\14\1\76\1\104\12\14\1\103\7\14\33\0\1\76"+
    "\3\0\3\14\1\76\1\14\1\105\21\14\33\0\1\76"+
    "\3\0\3\14\1\76\2\14\1\106\13\14\1\107\4\14"+
    "\33\0\1\76\3\0\3\14\1\76\1\14\1\110\1\111"+
    "\3\14\1\112\14\14\33\0\1\76\3\0\3\14\1\76"+
    "\10\14\1\113\12\14\33\0\1\76\3\0\3\14\1\76"+
    "\2\14\1\114\20\14\33\0\1\76\3\0\3\14\1\76"+
    "\16\14\1\115\4\14\36\0\1\116\3\117\1\0\23\117"+
    "\67\0\1\120\66\0\1\121\66\0\1\122\65\0\1\123"+
    "\65\0\1\124\65\0\1\125\71\0\1\126\66\0\1\127"+
    "\22\0\1\130\127\0\1\131\66\0\1\132\22\0\1\76"+
    "\3\0\3\14\1\76\16\14\1\133\4\14\33\0\1\76"+
    "\3\0\3\14\1\76\1\14\1\134\1\14\1\63\17\14"+
    "\33\0\1\76\3\0\3\14\1\76\6\14\1\135\14\14"+
    "\33\0\1\76\3\0\1\136\2\14\1\76\1\137\12\14"+
    "\1\136\7\14\33\0\1\76\3\0\3\14\1\76\1\14"+
    "\1\140\21\14\33\0\1\76\3\0\3\14\1\76\2\14"+
    "\1\141\13\14\1\142\4\14\33\0\1\76\3\0\3\14"+
    "\1\76\1\14\1\143\1\144\3\14\1\145\14\14\33\0"+
    "\1\76\3\0\3\14\1\76\10\14\1\146\12\14\33\0"+
    "\1\76\3\0\3\14\1\76\2\14\1\147\20\14\33\0"+
    "\1\76\3\0\3\14\1\76\16\14\1\150\4\14\33\0"+
    "\1\151\3\0\3\71\1\151\23\71\26\0\1\72\1\152"+
    "\64\72\3\73\1\153\62\73\6\0\1\12\65\0\1\12"+
    "\1\0\3\12\64\0\3\14\1\0\23\14\33\0\1\76"+
    "\3\0\3\14\1\76\14\14\1\154\6\14\33\0\1\76"+
    "\3\0\3\14\1\76\2\14\1\155\20\14\33\0\1\76"+
    "\3\0\3\14\1\76\1\14\1\156\21\14\33\0\1\76"+
    "\3\0\3\14\1\76\7\14\1\157\13\14\33\0\1\76"+
    "\3\0\1\14\1\160\1\14\1\76\4\14\1\160\16\14"+
    "\33\0\1\76\3\0\3\14\1\76\15\14\1\161\5\14"+
    "\33\0\1\76\3\0\3\14\1\76\2\14\1\162\20\14"+
    "\33\0\1\76\3\0\3\14\1\76\10\14\1\163\12\14"+
    "\33\0\1\76\3\0\3\14\1\76\3\14\1\164\17\14"+
    "\33\0\1\76\3\0\1\165\2\14\1\76\13\14\1\165"+
    "\7\14\33\0\1\76\3\0\3\14\1\76\3\14\1\166"+
    "\17\14\33\0\1\76\3\0\1\14\1\167\1\14\1\76"+
    "\3\14\1\170\1\167\16\14\33\0\1\76\3\0\3\14"+
    "\1\76\7\14\1\171\13\14\33\0\1\76\3\0\3\14"+
    "\1\76\7\14\1\172\13\14\34\0\1\117\1\0\3\117"+
    "\6\0\1\117\6\0\1\117\2\0\1\117\4\0\1\117"+
    "\65\0\1\173\36\0\1\174\1\175\1\174\1\0\1\176"+
    "\3\174\1\175\1\177\1\174\1\200\1\201\1\202\1\203"+
    "\3\174\1\204\1\205\1\174\1\206\1\174\37\0\1\207"+
    "\1\210\1\207\1\0\1\211\3\207\1\210\1\212\1\207"+
    "\1\213\1\214\1\215\1\216\3\207\1\217\1\220\1\207"+
    "\1\221\1\207\33\0\1\76\3\0\3\14\1\76\14\14"+
    "\1\222\6\14\33\0\1\76\3\0\3\14\1\76\2\14"+
    "\1\223\20\14\33\0\1\76\3\0\3\14\1\76\7\14"+
    "\1\224\13\14\33\0\1\76\3\0\1\14\1\137\1\14"+
    "\1\76\4\14\1\137\16\14\33\0\1\76\3\0\3\14"+
    "\1\76\15\14\1\222\5\14\33\0\1\76\3\0\3\14"+
    "\1\76\2\14\1\225\20\14\33\0\1\76\3\0\3\14"+
    "\1\76\10\14\1\226\12\14\33\0\1\76\3\0\3\14"+
    "\1\76\3\14\1\227\17\14\33\0\1\76\3\0\1\230"+
    "\2\14\1\76\13\14\1\230\7\14\33\0\1\76\3\0"+
    "\3\14\1\76\3\14\1\231\17\14\33\0\1\76\3\0"+
    "\1\14\1\232\1\14\1\76\3\14\1\233\1\232\16\14"+
    "\33\0\1\76\3\0\3\14\1\76\7\14\1\233\13\14"+
    "\33\0\1\76\3\0\3\14\1\76\7\14\1\234\13\14"+
    "\26\0\1\72\1\235\64\72\5\0\1\76\3\0\3\14"+
    "\1\76\10\14\1\236\12\14\33\0\1\76\3\0\3\14"+
    "\1\76\3\14\1\237\17\14\33\0\1\76\3\0\3\14"+
    "\1\76\15\14\1\240\5\14\33\0\1\76\3\0\3\14"+
    "\1\76\1\14\1\241\21\14\33\0\1\76\3\0\3\14"+
    "\1\76\10\14\1\242\12\14\33\0\1\76\3\0\3\14"+
    "\1\76\1\14\1\243\21\14\33\0\1\76\3\0\3\14"+
    "\1\76\3\14\1\244\17\14\33\0\1\76\3\0\3\14"+
    "\1\76\15\14\1\245\5\14\33\0\1\76\3\0\1\14"+
    "\1\246\1\14\1\76\4\14\1\246\10\14\1\247\5\14"+
    "\33\0\1\76\3\0\3\14\1\76\16\14\1\250\4\14"+
    "\33\0\1\76\3\0\3\14\1\76\14\14\1\251\6\14"+
    "\33\0\1\76\3\0\3\14\1\76\20\14\1\252\2\14"+
    "\33\0\1\76\3\0\3\14\1\76\20\14\1\253\2\14"+
    "\33\0\1\76\3\0\1\254\2\14\1\76\13\14\1\254"+
    "\7\14\33\0\1\255\3\0\3\174\1\255\23\174\33\0"+
    "\1\255\3\0\3\174\1\255\16\174\1\256\4\174\33\0"+
    "\1\255\3\0\3\174\1\255\1\174\1\257\1\174\1\201"+
    "\17\174\33\0\1\255\3\0\3\174\1\255\6\174\1\260"+
    "\14\174\33\0\1\255\3\0\1\261\2\174\1\255\1\262"+
    "\12\174\1\261\7\174\33\0\1\255\3\0\3\174\1\255"+
    "\1\174\1\263\21\174\33\0\1\255\3\0\3\174\1\255"+
    "\2\174\1\264\13\174\1\265\4\174\33\0\1\255\3\0"+
    "\3\174\1\255\1\174\1\266\1\267\3\174\1\270\14\174"+
    "\33\0\1\255\3\0\3\174\1\255\10\174\1\271\12\174"+
    "\33\0\1\255\3\0\3\174\1\255\2\174\1\272\20\174"+
    "\33\0\1\255\3\0\3\174\1\255\16\174\1\273\4\174"+
    "\33\0\1\274\3\0\3\207\1\274\23\207\33\0\1\274"+
    "\3\0\3\207\1\274\16\207\1\275\4\207\33\0\1\274"+
    "\3\0\3\207\1\274\1\207\1\276\1\207\1\214\17\207"+
    "\33\0\1\274\3\0\3\207\1\274\6\207\1\277\14\207"+
    "\33\0\1\274\3\0\1\300\2\207\1\274\1\301\12\207"+
    "\1\300\7\207\33\0\1\274\3\0\3\207\1\274\1\207"+
    "\1\302\21\207\33\0\1\274\3\0\3\207\1\274\2\207"+
    "\1\303\13\207\1\304\4\207\33\0\1\274\3\0\3\207"+
    "\1\274\1\207\1\305\1\306\3\207\1\307\14\207\33\0"+
    "\1\274\3\0\3\207\1\274\10\207\1\310\12\207\33\0"+
    "\1\274\3\0\3\207\1\274\2\207\1\311\20\207\33\0"+
    "\1\274\3\0\3\207\1\274\16\207\1\312\4\207\33\0"+
    "\1\76\3\0\3\14\1\76\10\14\1\137\12\14\33\0"+
    "\1\76\3\0\3\14\1\76\3\14\1\136\17\14\33\0"+
    "\1\76\3\0\3\14\1\76\1\14\1\222\21\14\33\0"+
    "\1\76\3\0\3\14\1\76\1\14\1\137\21\14\33\0"+
    "\1\76\3\0\3\14\1\76\3\14\1\313\17\14\33\0"+
    "\1\76\3\0\3\14\1\76\15\14\1\314\5\14\33\0"+
    "\1\76\3\0\1\14\1\315\1\14\1\76\4\14\1\315"+
    "\10\14\1\136\5\14\33\0\1\76\3\0\3\14\1\76"+
    "\16\14\1\137\4\14\33\0\1\76\3\0\3\14\1\76"+
    "\14\14\1\316\6\14\33\0\1\76\3\0\3\14\1\76"+
    "\20\14\1\137\2\14\33\0\1\76\3\0\1\136\2\14"+
    "\1\76\13\14\1\136\7\14\33\0\1\76\3\0\1\14"+
    "\1\317\1\14\1\76\4\14\1\317\16\14\33\0\1\76"+
    "\3\0\3\14\1\76\10\14\1\320\12\14\33\0\1\76"+
    "\3\0\3\14\1\76\10\14\1\321\12\14\33\0\1\76"+
    "\3\0\3\14\1\76\22\14\1\322\33\0\1\76\3\0"+
    "\3\14\1\76\15\14\1\323\5\14\33\0\1\76\3\0"+
    "\3\14\1\76\7\14\1\324\13\14\33\0\1\76\3\0"+
    "\1\14\1\325\1\14\1\76\4\14\1\325\16\14\33\0"+
    "\1\76\3\0\3\14\1\76\16\14\1\326\4\14\33\0"+
    "\1\76\3\0\1\14\1\327\1\14\1\76\4\14\1\327"+
    "\16\14\37\0\3\174\1\0\23\174\33\0\1\255\3\0"+
    "\3\174\1\255\14\174\1\330\6\174\33\0\1\255\3\0"+
    "\3\174\1\255\2\174\1\331\20\174\33\0\1\255\3\0"+
    "\3\174\1\255\7\174\1\332\13\174\33\0\1\255\3\0"+
    "\1\174\1\262\1\174\1\255\4\174\1\262\16\174\33\0"+
    "\1\255\3\0\3\174\1\255\15\174\1\330\5\174\33\0"+
    "\1\255\3\0\3\174\1\255\2\174\1\333\20\174\33\0"+
    "\1\255\3\0\3\174\1\255\10\174\1\334\12\174\33\0"+
    "\1\255\3\0\3\174\1\255\3\174\1\335\17\174\33\0"+
    "\1\255\3\0\1\336\2\174\1\255\13\174\1\336\7\174"+
    "\33\0\1\255\3\0\3\174\1\255\3\174\1\337\17\174"+
    "\33\0\1\255\3\0\1\174\1\340\1\174\1\255\3\174"+
    "\1\341\1\340\16\174\33\0\1\255\3\0\3\174\1\255"+
    "\7\174\1\341\13\174\33\0\1\255\3\0\3\174\1\255"+
    "\7\174\1\342\13\174\37\0\3\207\1\0\23\207\33\0"+
    "\1\274\3\0\3\207\1\274\14\207\1\343\6\207\33\0"+
    "\1\274\3\0\3\207\1\274\2\207\1\344\20\207\33\0"+
    "\1\274\3\0\3\207\1\274\7\207\1\345\13\207\33\0"+
    "\1\274\3\0\1\207\1\301\1\207\1\274\4\207\1\301"+
    "\16\207\33\0\1\274\3\0\3\207\1\274\15\207\1\343"+
    "\5\207\33\0\1\274\3\0\3\207\1\274\2\207\1\346"+
    "\20\207\33\0\1\274\3\0\3\207\1\274\10\207\1\347"+
    "\12\207\33\0\1\274\3\0\3\207\1\274\3\207\1\350"+
    "\17\207\33\0\1\274\3\0\1\351\2\207\1\274\13\207"+
    "\1\351\7\207\33\0\1\274\3\0\3\207\1\274\3\207"+
    "\1\352\17\207\33\0\1\274\3\0\1\207\1\353\1\207"+
    "\1\274\3\207\1\354\1\353\16\207\33\0\1\274\3\0"+
    "\3\207\1\274\7\207\1\354\13\207\33\0\1\274\3\0"+
    "\3\207\1\274\7\207\1\355\13\207\33\0\1\76\3\0"+
    "\3\14\1\76\22\14\1\137\33\0\1\76\3\0\3\14"+
    "\1\76\15\14\1\137\5\14\33\0\1\76\3\0\3\14"+
    "\1\76\7\14\1\356\13\14\33\0\1\76\3\0\3\14"+
    "\1\76\16\14\1\357\4\14\33\0\1\76\3\0\1\360"+
    "\2\14\1\76\13\14\1\360\7\14\33\0\1\76\3\0"+
    "\1\361\2\14\1\76\13\14\1\361\7\14\33\0\1\255"+
    "\3\0\3\174\1\255\10\174\1\262\12\174\33\0\1\255"+
    "\3\0\3\174\1\255\3\174\1\261\17\174\33\0\1\255"+
    "\3\0\3\174\1\255\1\174\1\330\21\174\33\0\1\255"+
    "\3\0\3\174\1\255\1\174\1\262\21\174\33\0\1\255"+
    "\3\0\3\174\1\255\3\174\1\362\17\174\33\0\1\255"+
    "\3\0\3\174\1\255\15\174\1\363\5\174\33\0\1\255"+
    "\3\0\1\174\1\364\1\174\1\255\4\174\1\364\10\174"+
    "\1\261\5\174\33\0\1\255\3\0\3\174\1\255\16\174"+
    "\1\262\4\174\33\0\1\255\3\0\3\174\1\255\14\174"+
    "\1\365\6\174\33\0\1\255\3\0\3\174\1\255\20\174"+
    "\1\262\2\174\33\0\1\255\3\0\1\261\2\174\1\255"+
    "\13\174\1\261\7\174\33\0\1\274\3\0\3\207\1\274"+
    "\10\207\1\301\12\207\33\0\1\274\3\0\3\207\1\274"+
    "\3\207\1\300\17\207\33\0\1\274\3\0\3\207\1\274"+
    "\1\207\1\343\21\207\33\0\1\274\3\0\3\207\1\274"+
    "\1\207\1\301\21\207\33\0\1\274\3\0\3\207\1\274"+
    "\3\207\1\366\17\207\33\0\1\274\3\0\3\207\1\274"+
    "\15\207\1\367\5\207\33\0\1\274\3\0\1\207\1\370"+
    "\1\207\1\274\4\207\1\370\10\207\1\300\5\207\33\0"+
    "\1\274\3\0\3\207\1\274\16\207\1\301\4\207\33\0"+
    "\1\274\3\0\3\207\1\274\14\207\1\371\6\207\33\0"+
    "\1\274\3\0\3\207\1\274\20\207\1\301\2\207\33\0"+
    "\1\274\3\0\1\300\2\207\1\274\13\207\1\300\7\207"+
    "\33\0\1\76\3\0\1\133\2\14\1\76\13\14\1\133"+
    "\7\14\33\0\1\76\3\0\1\137\2\14\1\76\13\14"+
    "\1\137\7\14\33\0\1\76\3\0\3\14\1\76\14\14"+
    "\1\372\6\14\33\0\1\255\3\0\3\174\1\255\22\174"+
    "\1\262\33\0\1\255\3\0\3\174\1\255\15\174\1\262"+
    "\5\174\33\0\1\255\3\0\3\174\1\255\7\174\1\373"+
    "\13\174\33\0\1\255\3\0\3\174\1\255\16\174\1\374"+
    "\4\174\33\0\1\274\3\0\3\207\1\274\22\207\1\301"+
    "\33\0\1\274\3\0\3\207\1\274\15\207\1\301\5\207"+
    "\33\0\1\274\3\0\3\207\1\274\7\207\1\375\13\207"+
    "\33\0\1\274\3\0\3\207\1\274\16\207\1\376\4\207"+
    "\33\0\1\76\3\0\3\14\1\76\10\14\1\377\12\14"+
    "\33\0\1\255\3\0\1\256\2\174\1\255\13\174\1\256"+
    "\7\174\33\0\1\255\3\0\1\262\2\174\1\255\13\174"+
    "\1\262\7\174\33\0\1\274\3\0\1\275\2\207\1\274"+
    "\13\207\1\275\7\207\33\0\1\274\3\0\1\301\2\207"+
    "\1\274\13\207\1\301\7\207\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11286];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\1\11\1\0\1\1\1\0\1\11\14\1"+
    "\2\0\6\1\12\11\2\0\1\11\15\1\1\0\2\1"+
    "\1\0\20\1\2\0\6\11\24\1\1\0\1\11\17\1"+
    "\1\11\204\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
Position Pos = new Position();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { yybegin(YYINITIAL);
	Pos.line += 1;
	Pos.col = 1;
          }
        case 62: break;
        case 24: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 63: break;
        case 43: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC,
			new CSXToken(Pos));
          }
        case 64: break;
        case 46: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos));
          }
        case 65: break;
        case 29: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.CAND,
			new CSXToken(Pos));
          }
        case 66: break;
        case 48: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos));
          }
        case 67: break;
        case 34: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"++\" operator", Pos));
          }
        case 68: break;
        case 39: 
          { Pos.setpos();
	Pos.col += yytext().length();
	yybegin(YYINITIAL);
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word '" +  yytext() + "' after an Increment or Decrement operator, expected an identifier.", Pos));
          }
        case 69: break;
        case 47: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos));
          }
        case 70: break;
        case 49: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_READ,
			new CSXToken(Pos));
          }
        case 71: break;
        case 22: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RPAREN,
			new CSXToken(Pos));
          }
        case 72: break;
        case 7: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.ASG,
			new CSXToken(Pos));
          }
        case 73: break;
        case 36: 
          { Pos.setpos();
	String parsedString = yytext();
	Pos.col += parsedString.length();
	parsedString = parsedString.replace('~', '-');
	try{
		return new Symbol(sym.FLOATLIT,
				new CSXFloatLitToken(Float.parseFloat(parsedString), Pos));

	} catch (NumberFormatException e) {

		System.out.println("Overflow Error");
		System.out.println(e.getMessage());

		return new Symbol(sym.FLOATLIT,
				new CSXFloatLitToken(Float.MAX_VALUE, Pos));
	}
          }
        case 74: break;
        case 31: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.GEQ,
new CSXToken(Pos));
          }
        case 75: break;
        case 37: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC,
			new CSXToken(Pos));
          }
        case 76: break;
        case 41: 
          { Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.CHARLIT,
			new CSXCharLitToken(yycharat(Pos.col), Pos));
          }
        case 77: break;
        case 15: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COLON,
			new CSXToken(Pos));
          }
        case 78: break;
        case 20: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.RBRACE,
			new CSXToken(Pos));
          }
        case 79: break;
        case 59: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos));
          }
        case 80: break;
        case 17: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACKET,
			new CSXToken(Pos));
          }
        case 81: break;
        case 35: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"--\" operator", Pos));
          }
        case 82: break;
        case 5: 
          { yybegin(FoundIdentifier);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 83: break;
        case 54: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos));
          }
        case 84: break;
        case 11: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.PLUS,
			new CSXToken(Pos));
          }
        case 85: break;
        case 25: 
          { System.out.println(yytext());
    Pos.setpos();
    Pos.col += yytext().length();
          }
        case 86: break;
        case 45: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos));
          }
        case 87: break;
        case 42: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC,
			new CSXToken(Pos));
          }
        case 88: break;
        case 12: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.MINUS,
			new CSXToken(Pos));
          }
        case 89: break;
        case 14: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SEMI,
			new CSXToken(Pos));
          }
        case 90: break;
        case 27: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.rw_IF,
			new CSXToken(Pos));
          }
        case 91: break;
        case 33: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOTEQ,
			new CSXToken(Pos));
          }
        case 92: break;
        case 1: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.SLASH,
			new CSXToken(Pos));
          }
        case 93: break;
        case 58: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONST,
			new CSXToken(Pos));
          }
        case 94: break;
        case 26: 
          { Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.STRLIT,
			new CSXStringLitToken(yytext(), Pos));
          }
        case 95: break;
        case 30: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.EQ,
			new CSXToken(Pos));
          }
        case 96: break;
        case 18: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.RBRACKET,
			new CSXToken(Pos));
          }
        case 97: break;
        case 4: 
          { yybegin(YYINITIAL);
	Pos.col += 1;
          }
        case 98: break;
        case 61: 
          { Pos.setpos();
	Pos.col = yytext().length();
	return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos));
          }
        case 99: break;
        case 55: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos));
          }
        case 100: break;
        case 60: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos));
          }
        case 101: break;
        case 32: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.LEQ,
new CSXToken(Pos));
          }
        case 102: break;
        case 51: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"++\" operator", Pos));
          }
        case 103: break;
        case 3: 
          { Pos.setpos();
	
	String parsedString = yytext();
	Pos.col += parsedString.length();
	parsedString = parsedString.replace('~', '-');

	try{
		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.parseInt(parsedString), Pos));

	} catch (NumberFormatException e) {

		System.out.println("Overflow Error");
		System.out.println(e.getMessage());

		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.MAX_VALUE, Pos));
	}
          }
        case 104: break;
        case 44: 
          { System.out.println(yytext());
	Pos.setpos();
	Pos.col += yytext().length();
          }
        case 105: break;
        case 50: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_VOID,
			new CSXToken(Pos));
          }
        case 106: break;
        case 40: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_INT,
			new CSXToken(Pos));
          }
        case 107: break;
        case 8: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.GT,
new CSXToken(Pos));
          }
        case 108: break;
        case 21: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LPAREN,
			new CSXToken(Pos));
          }
        case 109: break;
        case 19: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACE,
			new CSXToken(Pos));
          }
        case 110: break;
        case 57: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos));
          }
        case 111: break;
        case 56: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos));
          }
        case 112: break;
        case 10: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOT,
			new CSXToken(Pos));
          }
        case 113: break;
        case 53: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FLOAT,
			new CSXToken(Pos));
          }
        case 114: break;
        case 13: 
          { Pos.setpos();
Pos.col = yytext().length();
return new Symbol(sym.TIMES,
new CSXToken(Pos));
          }
        case 115: break;
        case 52: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"--\" operator", Pos));
          }
        case 116: break;
        case 38: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC,
			new CSXToken(Pos));
          }
        case 117: break;
        case 9: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.LT,
new CSXToken(Pos));
          }
        case 118: break;
        case 28: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COR,
			new CSXToken(Pos));
          }
        case 119: break;
        case 16: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COMMA,
			new CSXToken(Pos));
          }
        case 120: break;
        case 6: 
          { Pos.setpos();
Pos.col += yytext().length();
          }
        case 121: break;
        case 23: 
          { yybegin(YYINITIAL);
    Pos.col = 4;
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(sym.EOF, new CSXToken(0,0));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
