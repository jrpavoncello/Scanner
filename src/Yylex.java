/* The following code was generated by JFlex 1.4.3 on 10/8/15 6:26 PM */

class CSXToken
{
	int linenum;
	int colnum;

	CSXToken()
	{

	}

	CSXToken(int line,int col)
	{
		linenum = line;
		colnum = col;
	}

	CSXToken(Position p)
	{
		linenum = p.linenum;
		colnum = p.colnum;

	}

}

class CSXIntLitToken extends CSXToken
{
	int intValue;
	CSXIntLitToken(int val, Position p)
	{
		super(p);
		intValue=val;
	}
}

class CSXFloatLitToken extends CSXToken
{
	float floatValue;
	CSXFloatLitToken(float floatValue, Position p)
	{
		super(p);
		this.floatValue = floatValue;
	}
}

class CSXIdentifierToken extends CSXToken
{
	String identifierValue;
	CSXIdentifierToken(String identifierValue, Position p)
	{
		super(p);
		this.identifierValue = identifierValue;
	}

}

class CSXCharLitToken extends CSXToken
{
	char charValue;
	CSXCharLitToken(char charValue, Position p)
	{
		super(p);
		this.charValue = charValue;
	}
}

class CSXStringLitToken extends CSXToken
{
	String stringValue;
	CSXStringLitToken(String stringValue, Position p)
	{
		super(p);
		this.stringValue = stringValue;
	}
}

class CSXErrorToken extends CSXToken
{
	String error;
	CSXErrorToken(String error, Position p)
	{
		super(p);
		this.error = error;
	}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Position
{
	int  linenum; 			/* maintain this as line number current token was scanned on */
	int  colnum; 			/* maintain this as column number current token began at */
	int  line; 				/* maintain this as line number after scanning current token  */
	int  col; 				/* maintain this as column number after scanning current token  */
	Position()
	{
		linenum = 1;
		colnum = 1;
		line = 1;
		col = 1;
	}
	void setpos()
	{ // set starting position for current token
		linenum = line;
		colnum = col;
	}
} ;


//This class is used by the scanner to return token information that is useful for the parser
//This class will be replaced in our parser project by the java_cup.runtime.Symbol class
class Symbol
{
	public int sym;
	public CSXToken value;
	public Symbol(int tokenType, CSXToken theToken)
	{
		sym = tokenType;
		value = theToken;
	}
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/8/15 6:26 PM from the specification file
 * <tt>D:/dev/Java/Scanner/src/csx.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FoundIdentifierMatch = 6;
  public static final int FoundIncOrDec = 4;
  public static final int FoundIdentifier = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\111\1\3\2\0\1\4\22\0\1\110\1\71\1\6\1\1"+
    "\2\42\1\65\1\41\1\104\1\105\1\74\1\72\1\77\1\73\1\107"+
    "\1\2\12\5\1\76\1\75\1\67\1\66\1\70\2\11\1\17\1\26"+
    "\1\27\1\36\1\25\1\14\1\12\1\23\1\24\1\12\1\40\1\15"+
    "\1\12\1\31\1\16\1\37\1\12\1\34\1\33\1\21\1\32\1\35"+
    "\1\22\2\12\1\12\1\102\1\7\1\103\1\42\1\13\1\42\1\47"+
    "\1\54\1\55\1\61\1\53\1\44\1\43\1\51\1\52\1\43\1\63"+
    "\1\45\1\43\1\30\1\46\1\62\1\43\1\10\1\57\1\20\1\56"+
    "\1\60\1\50\3\43\1\100\1\64\1\101\1\106\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\1\1\1\4\1\5\13\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\1\1\30\1\31\1\14\1\15\12\6"+
    "\1\32\1\0\1\33\1\34\1\35\1\5\6\6\1\36"+
    "\11\6\1\7\1\0\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\0\1\47\1\50\4\6\1\51"+
    "\11\6\1\32\1\0\1\33\2\5\6\6\1\52\10\6"+
    "\1\7\1\0\1\53\13\54\13\55\13\6\1\56\1\5"+
    "\1\35\1\57\3\6\1\60\1\6\1\61\1\6\1\62"+
    "\3\6\1\63\1\64\1\6\5\54\1\65\11\54\5\55"+
    "\1\66\11\55\4\6\1\56\1\6\1\67\1\70\1\71"+
    "\1\72\1\73\1\6\1\74\1\75\13\54\13\55\2\6"+
    "\1\76\1\6\4\54\4\55\1\6\2\54\2\55\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0128"+
    "\0\u0206\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c"+
    "\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c"+
    "\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u0128"+
    "\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128"+
    "\0\u0128\0\u08ac\0\u08f6\0\u0128\0\u0128\0\u0940\0\u098a\0\u09d4"+
    "\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24"+
    "\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c\0\u08f6\0\u0128\0\u0d96\0\u0de0"+
    "\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u032e\0\u0f9c\0\u0fe6"+
    "\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236"+
    "\0\u1280\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u12ca"+
    "\0\u1314\0\u08f6\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c"+
    "\0\u032e\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642"+
    "\0\u168c\0\u16d6\0\336\0\u1720\0\u0128\0\u176a\0\u17b4\0\u17fe"+
    "\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970\0\u032e\0\u19ba\0\u1a04"+
    "\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54"+
    "\0\u0128\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a"+
    "\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa"+
    "\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa"+
    "\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a"+
    "\0\u2594\0\u25de\0\u2628\0\u2672\0\u2672\0\u032e\0\u26bc\0\u2706"+
    "\0\u2750\0\u032e\0\u279a\0\u032e\0\u27e4\0\u032e\0\u282e\0\u2878"+
    "\0\u28c2\0\u032e\0\u032e\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34"+
    "\0\u2a7e\0\u1ce8\0\u2ac8\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a"+
    "\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a"+
    "\0\u2016\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc\0\u3046\0\u3090"+
    "\0\u30da\0\u3124\0\u316e\0\u31b8\0\u3202\0\u324c\0\u0128\0\u3296"+
    "\0\u032e\0\u032e\0\u032e\0\u032e\0\u032e\0\u32e0\0\u032e\0\u032e"+
    "\0\u332a\0\u3374\0\u33be\0\u3408\0\u3452\0\u349c\0\u34e6\0\u3530"+
    "\0\u357a\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u3780"+
    "\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0"+
    "\0\u032e\0\u3a1a\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u3bd6"+
    "\0\u3c20\0\u3c6a\0\u3cb4\0\u3cfe\0\u3d48\0\u3d92\0\u3ddc\0\u032e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\5"+
    "\1\14\1\5\1\15\1\5\1\16\3\15\2\17\1\20"+
    "\1\15\1\21\1\22\1\23\1\24\4\15\1\14\1\25"+
    "\1\15\1\26\1\15\1\27\1\5\1\15\1\16\3\15"+
    "\1\20\1\15\1\21\1\22\1\23\1\24\2\15\1\25"+
    "\1\15\1\26\1\15\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\5\1\14\1\5\1\15\1\5\1\16\3\15\2\17"+
    "\1\20\1\15\1\21\1\22\1\23\1\24\4\15\1\14"+
    "\1\25\1\15\1\26\1\15\1\27\1\5\1\15\1\16"+
    "\3\15\1\20\1\15\1\21\1\22\1\23\1\24\2\15"+
    "\1\25\1\15\1\26\1\15\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\56\1\57\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\10\0\1\60\1\0\1\15\1\0\1\61"+
    "\3\15\2\62\1\63\1\15\1\64\1\65\1\66\1\67"+
    "\4\15\1\60\1\70\1\15\1\71\1\15\2\0\1\15"+
    "\1\61\3\15\1\63\1\15\1\64\1\65\1\66\1\67"+
    "\2\15\1\70\1\15\1\71\1\15\36\0\1\72\1\0"+
    "\1\72\1\0\25\72\2\0\21\72\141\0\1\73\112\0"+
    "\1\74\112\0\1\10\113\0\1\12\101\0\1\75\3\0"+
    "\2\13\2\0\1\13\1\76\1\77\101\13\6\0\1\100"+
    "\2\0\1\15\1\0\1\15\1\100\11\15\1\101\13\15"+
    "\2\0\10\15\1\101\10\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\25\15\2\0\21\15\33\0\1\100"+
    "\2\0\1\15\1\0\1\15\1\100\1\15\1\102\1\15"+
    "\1\103\21\15\2\0\2\15\1\102\1\15\1\103\14\15"+
    "\33\0\1\100\2\0\1\104\1\0\1\15\1\100\20\15"+
    "\1\104\4\15\2\0\21\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\7\15\1\105\15\15\2\0\6\15"+
    "\1\105\12\15\33\0\1\100\2\0\1\15\1\0\1\15"+
    "\1\100\1\106\13\15\2\107\7\15\2\0\1\15\1\106"+
    "\17\15\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\1\15\1\110\23\15\2\0\2\15\1\110\16\15\33\0"+
    "\1\100\2\0\1\111\1\0\1\15\1\100\2\15\1\112"+
    "\15\15\1\111\4\15\2\0\3\15\1\112\15\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\1\15\1\113"+
    "\1\114\4\15\1\115\15\15\2\0\2\15\1\113\1\114"+
    "\2\15\1\115\12\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\2\15\1\116\22\15\2\0\3\15\1\116"+
    "\15\15\33\0\1\100\2\0\1\117\1\0\1\15\1\100"+
    "\20\15\1\117\4\15\2\0\21\15\27\0\1\120\4\0"+
    "\1\120\1\121\1\120\2\0\1\120\4\0\1\120\7\0"+
    "\1\120\11\0\24\120\3\0\1\120\6\0\5\120\1\0"+
    "\1\120\1\0\1\120\65\0\1\122\112\0\1\123\112\0"+
    "\1\124\111\0\1\125\111\0\1\126\111\0\1\127\115\0"+
    "\1\130\112\0\1\131\23\0\1\12\101\0\1\132\7\0"+
    "\1\75\176\0\1\133\112\0\1\134\23\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\11\15\1\135\13\15\2\0"+
    "\10\15\1\135\10\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\1\15\1\136\1\15\1\65\21\15\2\0"+
    "\2\15\1\136\1\15\1\65\14\15\33\0\1\100\2\0"+
    "\1\137\1\0\1\15\1\100\20\15\1\137\4\15\2\0"+
    "\21\15\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\7\15\1\140\15\15\2\0\6\15\1\140\12\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\1\141\13\15"+
    "\2\142\7\15\2\0\1\15\1\141\17\15\33\0\1\100"+
    "\2\0\1\15\1\0\1\15\1\100\1\15\1\143\23\15"+
    "\2\0\2\15\1\143\16\15\33\0\1\100\2\0\1\144"+
    "\1\0\1\15\1\100\2\15\1\145\15\15\1\144\4\15"+
    "\2\0\3\15\1\145\15\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\1\15\1\146\1\147\4\15\1\150"+
    "\15\15\2\0\2\15\1\146\1\147\2\15\1\150\12\15"+
    "\33\0\1\100\2\0\1\15\1\0\1\15\1\100\2\15"+
    "\1\151\22\15\2\0\3\15\1\151\15\15\33\0\1\100"+
    "\2\0\1\152\1\0\1\15\1\100\20\15\1\152\4\15"+
    "\2\0\21\15\33\0\1\153\2\0\1\72\1\0\1\72"+
    "\1\153\25\72\2\0\21\72\26\0\1\73\1\154\110\73"+
    "\3\74\1\155\106\74\1\0\2\156\2\0\1\156\3\157"+
    "\7\156\1\157\7\156\1\157\60\156\11\0\1\15\1\0"+
    "\1\15\1\0\25\15\2\0\21\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\3\15\1\160\2\161\17\15"+
    "\2\0\4\15\1\160\14\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\2\15\1\162\22\15\2\0\3\15"+
    "\1\162\15\15\33\0\1\100\2\0\1\15\1\0\1\15"+
    "\1\100\1\15\1\163\23\15\2\0\2\15\1\163\16\15"+
    "\33\0\1\100\2\0\1\15\1\0\1\15\1\100\16\15"+
    "\1\164\6\15\2\0\13\15\1\164\5\15\33\0\1\100"+
    "\2\0\1\15\1\0\1\15\1\100\10\15\1\165\14\15"+
    "\2\0\7\15\1\165\11\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\4\15\2\166\17\15\2\0\21\15"+
    "\33\0\1\100\2\0\1\15\1\0\1\15\1\100\17\15"+
    "\1\167\5\15\2\0\14\15\1\167\4\15\33\0\1\100"+
    "\2\0\1\15\1\0\1\15\1\100\11\15\1\170\13\15"+
    "\2\0\10\15\1\170\10\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\2\15\1\171\22\15\2\0\3\15"+
    "\1\171\15\15\33\0\1\100\2\0\1\15\1\0\1\15"+
    "\1\100\3\15\1\172\21\15\2\0\4\15\1\172\14\15"+
    "\33\0\1\100\2\0\1\15\1\0\1\15\1\100\14\15"+
    "\2\173\7\15\2\0\21\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\3\15\1\174\21\15\2\0\4\15"+
    "\1\174\14\15\33\0\1\100\2\0\1\15\1\0\1\15"+
    "\1\100\10\15\1\175\14\15\2\0\7\15\1\175\11\15"+
    "\33\0\1\100\2\0\1\15\1\0\1\15\1\100\10\15"+
    "\1\176\14\15\2\0\7\15\1\176\11\15\27\0\1\177"+
    "\4\0\1\177\1\200\1\177\2\0\1\177\4\0\1\177"+
    "\7\0\1\177\10\0\1\201\24\177\3\0\1\177\6\0"+
    "\5\177\1\0\1\177\1\0\1\177\7\0\3\120\7\0"+
    "\1\120\7\0\1\120\10\0\1\120\60\0\1\202\1\0"+
    "\1\203\1\0\1\204\3\203\2\205\1\206\1\203\1\207"+
    "\1\210\1\211\1\212\4\203\1\202\1\213\1\203\1\214"+
    "\1\203\2\0\1\203\1\204\3\203\1\206\1\203\1\207"+
    "\1\210\1\211\1\212\2\203\1\213\1\203\1\214\1\203"+
    "\36\0\1\215\1\0\1\216\1\0\1\217\3\216\2\220"+
    "\1\221\1\216\1\222\1\223\1\224\1\225\4\216\1\215"+
    "\1\226\1\216\1\227\1\216\2\0\1\216\1\217\3\216"+
    "\1\221\1\216\1\222\1\223\1\224\1\225\2\216\1\226"+
    "\1\216\1\227\1\216\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\3\15\1\230\2\231\17\15\2\0\4\15"+
    "\1\230\14\15\33\0\1\100\2\0\1\15\1\0\1\15"+
    "\1\100\2\15\1\232\22\15\2\0\3\15\1\232\15\15"+
    "\33\0\1\100\2\0\1\15\1\0\1\15\1\100\16\15"+
    "\1\233\6\15\2\0\13\15\1\233\5\15\33\0\1\100"+
    "\2\0\1\15\1\0\1\15\1\100\10\15\1\234\14\15"+
    "\2\0\7\15\1\234\11\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\4\15\2\141\17\15\2\0\21\15"+
    "\33\0\1\100\2\0\1\15\1\0\1\15\1\100\17\15"+
    "\1\233\5\15\2\0\14\15\1\233\4\15\33\0\1\100"+
    "\2\0\1\15\1\0\1\15\1\100\11\15\1\235\13\15"+
    "\2\0\10\15\1\235\10\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\2\15\1\236\22\15\2\0\3\15"+
    "\1\236\15\15\33\0\1\100\2\0\1\15\1\0\1\15"+
    "\1\100\3\15\1\237\21\15\2\0\4\15\1\237\14\15"+
    "\33\0\1\100\2\0\1\15\1\0\1\15\1\100\14\15"+
    "\2\240\7\15\2\0\21\15\33\0\1\100\2\0\1\15"+
    "\1\0\1\15\1\100\3\15\1\241\21\15\2\0\4\15"+
    "\1\241\14\15\33\0\1\100\2\0\1\15\1\0\1\15"+
    "\1\100\10\15\1\230\14\15\2\0\7\15\1\230\11\15"+
    "\33\0\1\100\2\0\1\15\1\0\1\15\1\100\10\15"+
    "\1\242\14\15\2\0\7\15\1\242\11\15\26\0\1\73"+
    "\1\243\110\73\1\0\2\156\2\0\1\156\1\0\1\244"+
    "\101\156\2\0\2\13\2\0\1\13\1\245\1\77\1\157"+
    "\7\13\1\157\7\13\1\157\60\13\6\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\22\15\1\246\2\15\2\0"+
    "\16\15\1\246\2\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\16\15\1\247\6\15\2\0\13\15\1\247"+
    "\5\15\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\3\15\1\250\21\15\2\0\4\15\1\250\14\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\17\15\1\251"+
    "\5\15\2\0\14\15\1\251\4\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\11\15\1\252\13\15\2\0"+
    "\10\15\1\252\10\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\1\15\1\253\23\15\2\0\2\15\1\253"+
    "\16\15\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\11\15\1\254\13\15\2\0\10\15\1\254\10\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\3\15\1\255"+
    "\21\15\2\0\4\15\1\255\14\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\1\15\1\256\23\15\2\0"+
    "\2\15\1\256\16\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\17\15\1\257\5\15\2\0\14\15\1\257"+
    "\4\15\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\4\15\2\260\11\15\1\261\5\15\2\0\14\15\1\261"+
    "\4\15\33\0\1\100\2\0\1\262\1\0\1\15\1\100"+
    "\20\15\1\262\4\15\2\0\21\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\22\15\1\263\2\15\2\0"+
    "\16\15\1\263\2\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\14\15\2\264\7\15\2\0\21\15\27\0"+
    "\1\177\4\0\1\177\1\200\1\177\2\0\1\177\4\0"+
    "\1\177\7\0\1\177\11\0\24\177\3\0\1\177\6\0"+
    "\5\177\1\0\1\177\1\0\1\177\7\0\3\177\7\0"+
    "\1\177\7\0\1\177\10\0\1\177\55\0\1\265\2\0"+
    "\1\203\1\0\1\203\1\265\11\203\1\266\13\203\2\0"+
    "\10\203\1\266\10\203\33\0\1\265\2\0\1\203\1\0"+
    "\1\203\1\265\25\203\2\0\21\203\33\0\1\265\2\0"+
    "\1\203\1\0\1\203\1\265\1\203\1\267\1\203\1\210"+
    "\21\203\2\0\2\203\1\267\1\203\1\210\14\203\33\0"+
    "\1\265\2\0\1\270\1\0\1\203\1\265\20\203\1\270"+
    "\4\203\2\0\21\203\33\0\1\265\2\0\1\203\1\0"+
    "\1\203\1\265\7\203\1\271\15\203\2\0\6\203\1\271"+
    "\12\203\33\0\1\265\2\0\1\203\1\0\1\203\1\265"+
    "\1\272\13\203\2\273\7\203\2\0\1\203\1\272\17\203"+
    "\33\0\1\265\2\0\1\203\1\0\1\203\1\265\1\203"+
    "\1\274\23\203\2\0\2\203\1\274\16\203\33\0\1\265"+
    "\2\0\1\275\1\0\1\203\1\265\2\203\1\276\15\203"+
    "\1\275\4\203\2\0\3\203\1\276\15\203\33\0\1\265"+
    "\2\0\1\203\1\0\1\203\1\265\1\203\1\277\1\300"+
    "\4\203\1\301\15\203\2\0\2\203\1\277\1\300\2\203"+
    "\1\301\12\203\33\0\1\265\2\0\1\203\1\0\1\203"+
    "\1\265\2\203\1\302\22\203\2\0\3\203\1\302\15\203"+
    "\33\0\1\265\2\0\1\303\1\0\1\203\1\265\20\203"+
    "\1\303\4\203\2\0\21\203\33\0\1\304\2\0\1\216"+
    "\1\0\1\216\1\304\11\216\1\305\13\216\2\0\10\216"+
    "\1\305\10\216\33\0\1\304\2\0\1\216\1\0\1\216"+
    "\1\304\25\216\2\0\21\216\33\0\1\304\2\0\1\216"+
    "\1\0\1\216\1\304\1\216\1\306\1\216\1\223\21\216"+
    "\2\0\2\216\1\306\1\216\1\223\14\216\33\0\1\304"+
    "\2\0\1\307\1\0\1\216\1\304\20\216\1\307\4\216"+
    "\2\0\21\216\33\0\1\304\2\0\1\216\1\0\1\216"+
    "\1\304\7\216\1\310\15\216\2\0\6\216\1\310\12\216"+
    "\33\0\1\304\2\0\1\216\1\0\1\216\1\304\1\311"+
    "\13\216\2\312\7\216\2\0\1\216\1\311\17\216\33\0"+
    "\1\304\2\0\1\216\1\0\1\216\1\304\1\216\1\313"+
    "\23\216\2\0\2\216\1\313\16\216\33\0\1\304\2\0"+
    "\1\314\1\0\1\216\1\304\2\216\1\315\15\216\1\314"+
    "\4\216\2\0\3\216\1\315\15\216\33\0\1\304\2\0"+
    "\1\216\1\0\1\216\1\304\1\216\1\316\1\317\4\216"+
    "\1\320\15\216\2\0\2\216\1\316\1\317\2\216\1\320"+
    "\12\216\33\0\1\304\2\0\1\216\1\0\1\216\1\304"+
    "\2\216\1\321\22\216\2\0\3\216\1\321\15\216\33\0"+
    "\1\304\2\0\1\322\1\0\1\216\1\304\20\216\1\322"+
    "\4\216\2\0\21\216\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\22\15\1\141\2\15\2\0\16\15\1\141"+
    "\2\15\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\16\15\1\323\6\15\2\0\13\15\1\323\5\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\3\15\1\142"+
    "\21\15\2\0\4\15\1\142\14\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\11\15\1\141\13\15\2\0"+
    "\10\15\1\141\10\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\1\15\1\233\23\15\2\0\2\15\1\233"+
    "\16\15\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\3\15\1\324\21\15\2\0\4\15\1\324\14\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\1\15\1\141"+
    "\23\15\2\0\2\15\1\141\16\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\17\15\1\325\5\15\2\0"+
    "\14\15\1\325\4\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\4\15\2\326\11\15\1\142\5\15\2\0"+
    "\14\15\1\142\4\15\33\0\1\100\2\0\1\141\1\0"+
    "\1\15\1\100\20\15\1\141\4\15\2\0\21\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\14\15\2\142"+
    "\7\15\2\0\21\15\27\0\1\327\111\0\2\156\2\0"+
    "\1\156\3\244\7\156\1\244\7\156\1\244\60\156\6\0"+
    "\1\100\2\0\1\330\1\0\1\15\1\100\20\15\1\330"+
    "\4\15\2\0\21\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\4\15\2\331\17\15\2\0\21\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\11\15\1\332"+
    "\13\15\2\0\10\15\1\332\10\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\11\15\1\333\13\15\2\0"+
    "\10\15\1\333\10\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\24\15\1\334\2\0\20\15\1\334\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\17\15\1\335"+
    "\5\15\2\0\14\15\1\335\4\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\10\15\1\336\14\15\2\0"+
    "\7\15\1\336\11\15\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\4\15\2\337\17\15\2\0\21\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\4\15\2\340"+
    "\17\15\2\0\21\15\36\0\1\203\1\0\1\203\1\0"+
    "\25\203\2\0\21\203\33\0\1\265\2\0\1\203\1\0"+
    "\1\203\1\265\3\203\1\341\2\342\17\203\2\0\4\203"+
    "\1\341\14\203\33\0\1\265\2\0\1\203\1\0\1\203"+
    "\1\265\2\203\1\343\22\203\2\0\3\203\1\343\15\203"+
    "\33\0\1\265\2\0\1\203\1\0\1\203\1\265\16\203"+
    "\1\344\6\203\2\0\13\203\1\344\5\203\33\0\1\265"+
    "\2\0\1\203\1\0\1\203\1\265\10\203\1\345\14\203"+
    "\2\0\7\203\1\345\11\203\33\0\1\265\2\0\1\203"+
    "\1\0\1\203\1\265\4\203\2\272\17\203\2\0\21\203"+
    "\33\0\1\265\2\0\1\203\1\0\1\203\1\265\17\203"+
    "\1\344\5\203\2\0\14\203\1\344\4\203\33\0\1\265"+
    "\2\0\1\203\1\0\1\203\1\265\11\203\1\346\13\203"+
    "\2\0\10\203\1\346\10\203\33\0\1\265\2\0\1\203"+
    "\1\0\1\203\1\265\2\203\1\347\22\203\2\0\3\203"+
    "\1\347\15\203\33\0\1\265\2\0\1\203\1\0\1\203"+
    "\1\265\3\203\1\350\21\203\2\0\4\203\1\350\14\203"+
    "\33\0\1\265\2\0\1\203\1\0\1\203\1\265\14\203"+
    "\2\351\7\203\2\0\21\203\33\0\1\265\2\0\1\203"+
    "\1\0\1\203\1\265\3\203\1\352\21\203\2\0\4\203"+
    "\1\352\14\203\33\0\1\265\2\0\1\203\1\0\1\203"+
    "\1\265\10\203\1\341\14\203\2\0\7\203\1\341\11\203"+
    "\33\0\1\265\2\0\1\203\1\0\1\203\1\265\10\203"+
    "\1\353\14\203\2\0\7\203\1\353\11\203\36\0\1\216"+
    "\1\0\1\216\1\0\25\216\2\0\21\216\33\0\1\304"+
    "\2\0\1\216\1\0\1\216\1\304\3\216\1\354\2\355"+
    "\17\216\2\0\4\216\1\354\14\216\33\0\1\304\2\0"+
    "\1\216\1\0\1\216\1\304\2\216\1\356\22\216\2\0"+
    "\3\216\1\356\15\216\33\0\1\304\2\0\1\216\1\0"+
    "\1\216\1\304\16\216\1\357\6\216\2\0\13\216\1\357"+
    "\5\216\33\0\1\304\2\0\1\216\1\0\1\216\1\304"+
    "\10\216\1\360\14\216\2\0\7\216\1\360\11\216\33\0"+
    "\1\304\2\0\1\216\1\0\1\216\1\304\4\216\2\311"+
    "\17\216\2\0\21\216\33\0\1\304\2\0\1\216\1\0"+
    "\1\216\1\304\17\216\1\357\5\216\2\0\14\216\1\357"+
    "\4\216\33\0\1\304\2\0\1\216\1\0\1\216\1\304"+
    "\11\216\1\361\13\216\2\0\10\216\1\361\10\216\33\0"+
    "\1\304\2\0\1\216\1\0\1\216\1\304\2\216\1\362"+
    "\22\216\2\0\3\216\1\362\15\216\33\0\1\304\2\0"+
    "\1\216\1\0\1\216\1\304\3\216\1\363\21\216\2\0"+
    "\4\216\1\363\14\216\33\0\1\304\2\0\1\216\1\0"+
    "\1\216\1\304\14\216\2\364\7\216\2\0\21\216\33\0"+
    "\1\304\2\0\1\216\1\0\1\216\1\304\3\216\1\365"+
    "\21\216\2\0\4\216\1\365\14\216\33\0\1\304\2\0"+
    "\1\216\1\0\1\216\1\304\10\216\1\354\14\216\2\0"+
    "\7\216\1\354\11\216\33\0\1\304\2\0\1\216\1\0"+
    "\1\216\1\304\10\216\1\366\14\216\2\0\7\216\1\366"+
    "\11\216\33\0\1\100\2\0\1\367\1\0\1\15\1\100"+
    "\20\15\1\367\4\15\2\0\21\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\24\15\1\141\2\0\20\15"+
    "\1\141\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\17\15\1\141\5\15\2\0\14\15\1\141\4\15\33\0"+
    "\1\100\2\0\1\15\1\0\1\15\1\100\10\15\1\370"+
    "\14\15\2\0\7\15\1\370\11\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\14\15\2\371\7\15\2\0"+
    "\21\15\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\14\15\2\372\7\15\2\0\21\15\33\0\1\265\2\0"+
    "\1\203\1\0\1\203\1\265\22\203\1\272\2\203\2\0"+
    "\16\203\1\272\2\203\33\0\1\265\2\0\1\203\1\0"+
    "\1\203\1\265\16\203\1\373\6\203\2\0\13\203\1\373"+
    "\5\203\33\0\1\265\2\0\1\203\1\0\1\203\1\265"+
    "\3\203\1\273\21\203\2\0\4\203\1\273\14\203\33\0"+
    "\1\265\2\0\1\203\1\0\1\203\1\265\11\203\1\272"+
    "\13\203\2\0\10\203\1\272\10\203\33\0\1\265\2\0"+
    "\1\203\1\0\1\203\1\265\1\203\1\344\23\203\2\0"+
    "\2\203\1\344\16\203\33\0\1\265\2\0\1\203\1\0"+
    "\1\203\1\265\3\203\1\374\21\203\2\0\4\203\1\374"+
    "\14\203\33\0\1\265\2\0\1\203\1\0\1\203\1\265"+
    "\1\203\1\272\23\203\2\0\2\203\1\272\16\203\33\0"+
    "\1\265\2\0\1\203\1\0\1\203\1\265\17\203\1\375"+
    "\5\203\2\0\14\203\1\375\4\203\33\0\1\265\2\0"+
    "\1\203\1\0\1\203\1\265\4\203\2\376\11\203\1\273"+
    "\5\203\2\0\14\203\1\273\4\203\33\0\1\265\2\0"+
    "\1\272\1\0\1\203\1\265\20\203\1\272\4\203\2\0"+
    "\21\203\33\0\1\265\2\0\1\203\1\0\1\203\1\265"+
    "\14\203\2\273\7\203\2\0\21\203\33\0\1\304\2\0"+
    "\1\216\1\0\1\216\1\304\22\216\1\311\2\216\2\0"+
    "\16\216\1\311\2\216\33\0\1\304\2\0\1\216\1\0"+
    "\1\216\1\304\16\216\1\377\6\216\2\0\13\216\1\377"+
    "\5\216\33\0\1\304\2\0\1\216\1\0\1\216\1\304"+
    "\3\216\1\312\21\216\2\0\4\216\1\312\14\216\33\0"+
    "\1\304\2\0\1\216\1\0\1\216\1\304\11\216\1\311"+
    "\13\216\2\0\10\216\1\311\10\216\33\0\1\304\2\0"+
    "\1\216\1\0\1\216\1\304\1\216\1\357\23\216\2\0"+
    "\2\216\1\357\16\216\33\0\1\304\2\0\1\216\1\0"+
    "\1\216\1\304\3\216\1\u0100\21\216\2\0\4\216\1\u0100"+
    "\14\216\33\0\1\304\2\0\1\216\1\0\1\216\1\304"+
    "\1\216\1\311\23\216\2\0\2\216\1\311\16\216\33\0"+
    "\1\304\2\0\1\216\1\0\1\216\1\304\17\216\1\u0101"+
    "\5\216\2\0\14\216\1\u0101\4\216\33\0\1\304\2\0"+
    "\1\216\1\0\1\216\1\304\4\216\2\u0102\11\216\1\312"+
    "\5\216\2\0\14\216\1\312\4\216\33\0\1\304\2\0"+
    "\1\311\1\0\1\216\1\304\20\216\1\311\4\216\2\0"+
    "\21\216\33\0\1\304\2\0\1\216\1\0\1\216\1\304"+
    "\14\216\2\312\7\216\2\0\21\216\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\14\15\2\141\7\15\2\0"+
    "\21\15\33\0\1\100\2\0\1\15\1\0\1\15\1\100"+
    "\14\15\2\137\7\15\2\0\21\15\33\0\1\100\2\0"+
    "\1\15\1\0\1\15\1\100\16\15\1\u0103\6\15\2\0"+
    "\13\15\1\u0103\5\15\33\0\1\265\2\0\1\u0104\1\0"+
    "\1\203\1\265\20\203\1\u0104\4\203\2\0\21\203\33\0"+
    "\1\265\2\0\1\203\1\0\1\203\1\265\24\203\1\272"+
    "\2\0\20\203\1\272\33\0\1\265\2\0\1\203\1\0"+
    "\1\203\1\265\17\203\1\272\5\203\2\0\14\203\1\272"+
    "\4\203\33\0\1\265\2\0\1\203\1\0\1\203\1\265"+
    "\10\203\1\u0105\14\203\2\0\7\203\1\u0105\11\203\33\0"+
    "\1\304\2\0\1\u0106\1\0\1\216\1\304\20\216\1\u0106"+
    "\4\216\2\0\21\216\33\0\1\304\2\0\1\216\1\0"+
    "\1\216\1\304\24\216\1\311\2\0\20\216\1\311\33\0"+
    "\1\304\2\0\1\216\1\0\1\216\1\304\17\216\1\311"+
    "\5\216\2\0\14\216\1\311\4\216\33\0\1\304\2\0"+
    "\1\216\1\0\1\216\1\304\10\216\1\u0107\14\216\2\0"+
    "\7\216\1\u0107\11\216\33\0\1\100\2\0\1\15\1\0"+
    "\1\15\1\100\11\15\1\u0108\13\15\2\0\10\15\1\u0108"+
    "\10\15\33\0\1\265\2\0\1\203\1\0\1\203\1\265"+
    "\14\203\2\272\7\203\2\0\21\203\33\0\1\265\2\0"+
    "\1\203\1\0\1\203\1\265\14\203\2\270\7\203\2\0"+
    "\21\203\33\0\1\304\2\0\1\216\1\0\1\216\1\304"+
    "\14\216\2\311\7\216\2\0\21\216\33\0\1\304\2\0"+
    "\1\216\1\0\1\216\1\304\14\216\2\307\7\216\2\0"+
    "\21\216\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15910];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\27\1\12\11\2\1\2\11"+
    "\15\1\1\0\2\1\1\11\22\1\1\0\6\11\2\1"+
    "\1\0\21\1\1\0\1\11\22\1\1\0\1\11\125\1"+
    "\1\11\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
Position Pos = new Position();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.GT, new CSXToken(Pos));
          }
        case 64: break;
        case 18: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACKET, new CSXToken(Pos));
          }
        case 65: break;
        case 26: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 66: break;
        case 17: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COMMA, new CSXToken(Pos));
          }
        case 67: break;
        case 25: 
          { Pos.setpos();
    yybegin(YYINITIAL);
    Pos.col += 1;
          }
        case 68: break;
        case 9: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LT, new CSXToken(Pos));
          }
        case 69: break;
        case 49: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos));
          }
        case 70: break;
        case 19: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RBRACKET, new CSXToken(Pos));
          }
        case 71: break;
        case 32: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.CAND,
			new CSXToken(Pos));
          }
        case 72: break;
        case 21: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RBRACE, new CSXToken(Pos));
          }
        case 73: break;
        case 51: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos));
          }
        case 74: break;
        case 40: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC, new CSXToken(Pos));
          }
        case 75: break;
        case 37: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"++\" operator", Pos));
          }
        case 76: break;
        case 41: 
          { Pos.setpos();
	Pos.col += yytext().length();
	yybegin(YYINITIAL);
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word '" +  yytext() + "' after an Increment or Decrement operator, expected an identifier.", Pos));
          }
        case 77: break;
        case 28: 
          { Pos.setpos();
	String parsedString = yytext();
	Pos.col += parsedString.length();
	parsedString = parsedString.replace('~', '-');
	
    float parsedFloat = Float.parseFloat(parsedString);
    if(parsedFloat == Float.NEGATIVE_INFINITY || parsedFloat == Float.POSITIVE_INFINITY)
    {
		System.out.println("Float Overflow Error");

		return new Symbol(sym.FLOATLIT,
				new CSXFloatLitToken(Float.MAX_VALUE, Pos));
    }
    else
    {
		return new Symbol(sym.FLOATLIT,
			new CSXFloatLitToken(parsedFloat, Pos));
	}
          }
        case 78: break;
        case 50: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos));
          }
        case 79: break;
        case 7: 
          { Pos.setpos();
	
	String parsed = yytext();
	Pos.col += parsed.length();
	return new Symbol(sym.error,
			new CSXErrorToken("Runaway character found: " + parsed, Pos));
          }
        case 80: break;
        case 47: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_READ,
			new CSXToken(Pos));
          }
        case 81: break;
        case 1: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found invalid token: " + yytext(), Pos));
          }
        case 82: break;
        case 45: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC, new CSXToken(Pos));
          }
        case 83: break;
        case 30: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_IF,
			new CSXToken(Pos));
          }
        case 84: break;
        case 63: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos));
          }
        case 85: break;
        case 61: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos));
          }
        case 86: break;
        case 38: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"--\" operator", Pos));
          }
        case 87: break;
        case 6: 
          { yybegin(FoundIdentifier);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 88: break;
        case 39: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC, new CSXToken(Pos));
          }
        case 89: break;
        case 56: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos));
          }
        case 90: break;
        case 48: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos));
          }
        case 91: break;
        case 14: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.TIMES, new CSXToken(Pos));
          }
        case 92: break;
        case 22: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LPAREN, new CSXToken(Pos));
          }
        case 93: break;
        case 12: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.PLUS, new CSXToken(Pos));
          }
        case 94: break;
        case 36: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOTEQ, new CSXToken(Pos));
          }
        case 95: break;
        case 60: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONST,
			new CSXToken(Pos));
          }
        case 96: break;
        case 29: 
          { Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.STRLIT,
			new CSXStringLitToken(yytext(), Pos));
          }
        case 97: break;
        case 44: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC, new CSXToken(Pos));
          }
        case 98: break;
        case 33: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.EQ,
			new CSXToken(Pos));
          }
        case 99: break;
        case 5: 
          { Pos.setpos();
	
	String parsed = yytext();
	Pos.col += parsed.length();
	return new Symbol(sym.error,
			new CSXErrorToken("Runaway string found: " + parsed, Pos));
          }
        case 100: break;
        case 15: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SEMI, new CSXToken(Pos));
          }
        case 101: break;
        case 57: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos));
          }
        case 102: break;
        case 3: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.line += 1;
	Pos.col = 1;
          }
        case 103: break;
        case 16: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COLON, new CSXToken(Pos));
          }
        case 104: break;
        case 46: 
          { Pos.setpos();
	
    int rowsSkipped = 0;
    String parseString = yytext();
	for(int i = 0; i < parseString.length(); i++)
	{
		Pos.col++;
		if(parseString.charAt(i) == '\n')
		{
			Pos.col=1;
			Pos.line++;
		}
	}
	
    System.out.println("Block Comment: " + parseString);
          }
        case 105: break;
        case 11: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOT, new CSXToken(Pos));
          }
        case 106: break;
        case 62: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos));
          }
        case 107: break;
        case 2: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SLASH, new CSXToken(Pos));
          }
        case 108: break;
        case 24: 
          { Pos.setpos();
	yybegin(YYINITIAL);
	Pos.col += 1;
          }
        case 109: break;
        case 35: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.GEQ, new CSXToken(Pos));
          }
        case 110: break;
        case 53: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"++\" operator", Pos));
          }
        case 111: break;
        case 4: 
          { Pos.setpos();
	
	String parsedString = yytext();
	Pos.col += parsedString.length();
	parsedString = parsedString.replace('~', '-');

	try{
		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.parseInt(parsedString), Pos));

	} catch (NumberFormatException e) {

		System.out.println("Overflow Error");
		System.out.println(e.getMessage());

		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.MAX_VALUE, Pos));
	}
          }
        case 112: break;
        case 8: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.ASG, new CSXToken(Pos));
          }
        case 113: break;
        case 52: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_VOID,
			new CSXToken(Pos));
          }
        case 114: break;
        case 43: 
          { Pos.setpos();
	String charString = yytext();
	Pos.col += charString.length();

	char parsedChar;
	switch(charString)
	{
		case "'\\n'":
			parsedChar = '\n';
			break;
		case "'\\t'":
			parsedChar = '\t';
			break;
		case "'\\\\'":
			parsedChar = '\\';
			break;
		case "'\\''":
			parsedChar = '\'';
			break;
		default:
			parsedChar = charString.charAt(1);
			break;
	}
	
	return new Symbol(sym.CHARLIT,
			new CSXCharLitToken(parsedChar, Pos));
          }
        case 115: break;
        case 42: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_INT,
			new CSXToken(Pos));
          }
        case 116: break;
        case 27: 
          { String comment = yytext();
    System.out.println("Line Comment: " + comment);
    Pos.setpos();
    Pos.col += comment.length();
          }
        case 117: break;
        case 23: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RPAREN, new CSXToken(Pos));
          }
        case 118: break;
        case 13: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.MINUS, new CSXToken(Pos));
          }
        case 119: break;
        case 59: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos));
          }
        case 120: break;
        case 58: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos));
          }
        case 121: break;
        case 55: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FLOAT,
			new CSXToken(Pos));
          }
        case 122: break;
        case 34: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LEQ, new CSXToken(Pos));
          }
        case 123: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"--\" operator", Pos));
          }
        case 124: break;
        case 20: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACE, new CSXToken(Pos));
          }
        case 125: break;
        case 31: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COR,
			new CSXToken(Pos));
          }
        case 126: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(sym.EOF, new CSXToken(0,0));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
