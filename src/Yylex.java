/* The following code was generated by JFlex 1.4.3 on 10/4/15 11:00 AM */

class CSXToken
{
int linenum;
int colnum;

CSXToken()
{

}

CSXToken(int line,int col)
{
linenum = line;
colnum = col;
}

CSXToken(Position p)
{
linenum = p.linenum;
colnum = p.colnum;

}

}

class CSXIntLitToken extends CSXToken
{
int intValue;
CSXIntLitToken(int val, Position p)
{
super(p);
intValue=val;
}
}

class CSXFloatLitToken extends CSXToken
{
float floatValue;
CSXFloatLitToken(float val, Position p)
{
super(p);
floatValue = val;
}
}

class CSXIdentifierToken extends CSXToken
{
String identifierValue;
CSXIdentifierToken(String val, Position p)
{
super(p);
identifierValue = val;
}

}

class CSXCharLitToken extends CSXToken
{
char charValue;
CSXCharLitToken(char val, Position p)
{
super(p);
charValue = val;
}
}

class CSXStringLitToken extends CSXToken
{
String stringValue;
CSXStringLitToken(String val, Position p)
{
super(p);
stringValue = val;
}
}

class CSXErrorToken extends CSXToken
{
String error;
CSXErrorToken(String errorMessage, Position p)
{
super(p);
error = errorMessage;
}
}

class CSXEOFToken extends CSXToken
{
String error;
CSXEOFToken(int line, int col)
{
super(line, col);
}

CSXEOFToken(String errorMessage, Position p)
{
super(p);
error = errorMessage;
}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Position
{
int  linenum; 			/* maintain this as line number current
token was scanned on */
int  colnum; 			/* maintain this as column number current
token began at */
int  line; 				/* maintain this as line number after
scanning current token  */
int  col; 				/* maintain this as column number after
scanning current token  */
Position()
{
linenum = 1;
colnum = 1;
line = 1;
col = 1;
}
void setpos()
{ // set starting position for current token
linenum = line;
colnum = col;
}
} ;


//This class is used by the scanner to return token information that is useful for the parser
//This class will be replaced in our parser project by the java_cup.runtime.Symbol class
class Symbol
{
public int sym;
public CSXToken value;
public Symbol(int tokenType, CSXToken theToken)
{
sym = tokenType;
value = theToken;
}
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/4/15 11:00 AM from the specification file
 * <tt>/Users/christopherenck/Desktop/P2/csx.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FoundIncOrDec = 4;
  public static final int FoundIdentifier = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\51\2\0\1\52\22\0\1\6\1\46\1\5\1\1\1\3"+
    "\1\0\1\42\1\37\1\60\1\61\1\0\1\44\1\53\1\45\1\0"+
    "\1\2\12\4\1\50\1\47\1\0\1\43\3\0\1\17\1\25\1\26"+
    "\1\34\1\24\1\14\1\12\1\22\1\23\1\12\1\36\1\15\1\12"+
    "\1\27\1\16\1\35\1\12\1\32\1\31\1\20\1\30\1\33\1\21"+
    "\2\12\1\40\1\56\1\7\1\57\1\0\1\13\1\0\1\17\1\25"+
    "\1\26\1\34\1\24\1\14\1\12\1\22\1\23\1\12\1\36\1\15"+
    "\1\12\1\10\1\16\1\35\1\12\1\32\1\31\1\11\1\30\1\33"+
    "\1\21\3\12\1\54\1\41\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\0\1\3\13\4\3\0\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\0\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\6\1\7"+
    "\14\23\2\0\1\24\1\0\6\4\1\25\11\4\2\0"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\5\4\1\36\11\4\2\0\4\4\1\37\12\4\1\40"+
    "\13\4\1\0\1\41\1\42\3\4\1\43\1\44\4\4"+
    "\1\45\1\4\1\46\1\47\5\4\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\4\1\56\1\4\1\57\3\4"+
    "\1\60\1\4\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u015e\0\u015e\0\u015e\0\u0514\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u0546\0\u0578\0\u015e"+
    "\0\u0190\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0190\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u0bb8\0\u0bea\0\u0672\0\u0c1c\0\u0c4e\0\u0190\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0190\0\u0f6e"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe"+
    "\0\u1130\0\u015e\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u0e74\0\u0190"+
    "\0\u13ba\0\u13ec\0\u141e\0\u0190\0\u0190\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u0190\0\u1518\0\u0190\0\u0190\0\u154a\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u1388\0\u0190\0\u0190\0\u0190\0\u0190\0\u0190"+
    "\0\u1644\0\u0190\0\u1676\0\u0190\0\u16a8\0\u16da\0\u170c\0\u0190"+
    "\0\u173e\0\u0190";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\0\1\6\1\7\1\10\1\0"+
    "\1\11\1\12\1\11\1\0\1\13\3\11\1\12\1\14"+
    "\1\11\1\15\1\16\1\17\1\20\3\11\1\21\1\22"+
    "\1\11\1\23\1\11\1\24\1\11\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\0\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\0\1\11\1\12"+
    "\1\11\1\0\1\13\3\11\1\12\1\14\1\11\1\15"+
    "\1\16\1\17\1\20\3\11\1\21\1\22\1\11\1\23"+
    "\1\11\1\24\1\11\1\25\1\26\1\27\1\46\1\47"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\10\50\1\51\1\52\1\51"+
    "\1\50\1\53\3\51\1\52\1\54\1\51\1\55\1\56"+
    "\1\57\1\60\3\51\1\61\1\62\1\51\1\63\1\51"+
    "\1\50\1\11\21\50\1\0\1\64\62\0\1\65\63\0"+
    "\1\6\55\0\5\7\1\66\1\0\1\67\52\7\66\0"+
    "\1\70\3\0\3\11\1\70\23\11\1\0\1\11\25\0"+
    "\1\70\3\0\3\11\1\70\16\11\1\71\4\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\1\11\1\72"+
    "\1\11\1\73\17\11\1\0\1\11\25\0\1\70\3\0"+
    "\3\11\1\70\6\11\1\74\14\11\1\0\1\11\25\0"+
    "\1\70\3\0\1\75\2\11\1\70\1\76\12\11\1\75"+
    "\7\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\1\11\1\77\21\11\1\0\1\11\25\0\1\70\3\0"+
    "\3\11\1\70\2\11\1\100\13\11\1\101\4\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\1\11\1\102"+
    "\1\103\3\11\1\104\14\11\1\0\1\11\25\0\1\70"+
    "\3\0\3\11\1\70\10\11\1\105\12\11\1\0\1\11"+
    "\25\0\1\70\3\0\3\11\1\70\2\11\1\106\20\11"+
    "\1\0\1\11\25\0\1\70\3\0\3\11\1\70\16\11"+
    "\1\107\4\11\1\0\1\11\30\0\1\110\3\111\1\0"+
    "\23\111\1\0\1\111\62\0\1\112\62\0\1\113\62\0"+
    "\1\114\62\0\1\115\62\0\1\116\57\0\1\117\67\0"+
    "\1\35\54\0\1\120\62\0\1\121\20\0\1\70\3\0"+
    "\3\11\1\70\16\11\1\122\4\11\1\0\1\11\25\0"+
    "\1\70\3\0\3\11\1\70\1\11\1\123\1\11\1\124"+
    "\17\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\6\11\1\125\14\11\1\0\1\11\25\0\1\70\3\0"+
    "\1\126\2\11\1\70\1\127\12\11\1\126\7\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\1\11\1\130"+
    "\21\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\2\11\1\131\13\11\1\132\4\11\1\0\1\11\25\0"+
    "\1\70\3\0\3\11\1\70\1\11\1\133\1\134\3\11"+
    "\1\135\14\11\1\0\1\11\25\0\1\70\3\0\3\11"+
    "\1\70\10\11\1\136\12\11\1\0\1\11\25\0\1\70"+
    "\3\0\3\11\1\70\2\11\1\137\20\11\1\0\1\11"+
    "\25\0\1\70\3\0\3\11\1\70\16\11\1\140\4\11"+
    "\1\0\1\11\21\0\40\141\1\0\21\141\40\142\1\0"+
    "\21\142\5\0\1\7\61\0\1\7\1\0\3\7\60\0"+
    "\3\11\1\0\23\11\1\0\1\11\25\0\1\70\3\0"+
    "\3\11\1\70\14\11\1\143\6\11\1\0\1\11\25\0"+
    "\1\70\3\0\3\11\1\70\2\11\1\144\20\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\1\11\1\145"+
    "\21\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\7\11\1\146\13\11\1\0\1\11\25\0\1\70\3\0"+
    "\1\11\1\147\1\11\1\70\4\11\1\147\16\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\15\11\1\150"+
    "\5\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\2\11\1\151\20\11\1\0\1\11\25\0\1\70\3\0"+
    "\3\11\1\70\10\11\1\152\12\11\1\0\1\11\25\0"+
    "\1\70\3\0\3\11\1\70\3\11\1\153\17\11\1\0"+
    "\1\11\25\0\1\70\3\0\1\154\2\11\1\70\13\11"+
    "\1\154\7\11\1\0\1\11\25\0\1\70\3\0\3\11"+
    "\1\70\3\11\1\155\17\11\1\0\1\11\25\0\1\70"+
    "\3\0\1\11\1\156\1\11\1\70\3\11\1\157\1\156"+
    "\16\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\7\11\1\160\13\11\1\0\1\11\25\0\1\70\3\0"+
    "\3\11\1\70\7\11\1\161\13\11\1\0\1\11\26\0"+
    "\1\111\1\0\3\111\6\0\1\111\6\0\1\111\2\0"+
    "\1\111\4\0\1\111\61\0\1\162\26\0\1\70\3\0"+
    "\3\11\1\70\14\11\1\163\6\11\1\0\1\11\25\0"+
    "\1\70\3\0\3\11\1\70\2\11\1\164\20\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\7\11\1\165"+
    "\13\11\1\0\1\11\25\0\1\70\3\0\1\11\1\127"+
    "\1\11\1\70\4\11\1\127\16\11\1\0\1\11\25\0"+
    "\1\70\3\0\3\11\1\70\15\11\1\163\5\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\2\11\1\166"+
    "\20\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\10\11\1\167\12\11\1\0\1\11\25\0\1\70\3\0"+
    "\3\11\1\70\3\11\1\170\17\11\1\0\1\11\25\0"+
    "\1\70\3\0\1\171\2\11\1\70\13\11\1\171\7\11"+
    "\1\0\1\11\25\0\1\70\3\0\3\11\1\70\3\11"+
    "\1\172\17\11\1\0\1\11\25\0\1\70\3\0\1\11"+
    "\1\173\1\11\1\70\3\11\1\174\1\173\16\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\7\11\1\174"+
    "\13\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\7\11\1\175\13\11\1\0\1\11\21\0\1\141\1\176"+
    "\36\141\1\0\21\141\3\142\1\177\34\142\1\0\21\142"+
    "\4\0\1\70\3\0\3\11\1\70\10\11\1\200\12\11"+
    "\1\0\1\11\25\0\1\70\3\0\3\11\1\70\3\11"+
    "\1\201\17\11\1\0\1\11\25\0\1\70\3\0\3\11"+
    "\1\70\15\11\1\202\5\11\1\0\1\11\25\0\1\70"+
    "\3\0\3\11\1\70\1\11\1\203\21\11\1\0\1\11"+
    "\25\0\1\70\3\0\3\11\1\70\10\11\1\204\12\11"+
    "\1\0\1\11\25\0\1\70\3\0\3\11\1\70\1\11"+
    "\1\205\21\11\1\0\1\11\25\0\1\70\3\0\3\11"+
    "\1\70\3\11\1\206\17\11\1\0\1\11\25\0\1\70"+
    "\3\0\3\11\1\70\15\11\1\207\5\11\1\0\1\11"+
    "\25\0\1\70\3\0\1\11\1\210\1\11\1\70\4\11"+
    "\1\210\10\11\1\211\5\11\1\0\1\11\25\0\1\70"+
    "\3\0\3\11\1\70\16\11\1\212\4\11\1\0\1\11"+
    "\25\0\1\70\3\0\3\11\1\70\14\11\1\213\6\11"+
    "\1\0\1\11\25\0\1\70\3\0\3\11\1\70\20\11"+
    "\1\214\2\11\1\0\1\11\25\0\1\70\3\0\3\11"+
    "\1\70\20\11\1\215\2\11\1\0\1\11\25\0\1\70"+
    "\3\0\1\216\2\11\1\70\13\11\1\216\7\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\10\11\1\127"+
    "\12\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\3\11\1\126\17\11\1\0\1\11\25\0\1\70\3\0"+
    "\3\11\1\70\1\11\1\163\21\11\1\0\1\11\25\0"+
    "\1\70\3\0\3\11\1\70\1\11\1\127\21\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\3\11\1\217"+
    "\17\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\15\11\1\220\5\11\1\0\1\11\25\0\1\70\3\0"+
    "\1\11\1\221\1\11\1\70\4\11\1\221\10\11\1\126"+
    "\5\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\16\11\1\127\4\11\1\0\1\11\25\0\1\70\3\0"+
    "\3\11\1\70\14\11\1\222\6\11\1\0\1\11\25\0"+
    "\1\70\3\0\3\11\1\70\20\11\1\127\2\11\1\0"+
    "\1\11\25\0\1\70\3\0\1\126\2\11\1\70\13\11"+
    "\1\126\7\11\1\0\1\11\21\0\1\141\1\223\36\141"+
    "\1\0\21\141\4\0\1\70\3\0\1\11\1\224\1\11"+
    "\1\70\4\11\1\224\16\11\1\0\1\11\25\0\1\70"+
    "\3\0\3\11\1\70\10\11\1\225\12\11\1\0\1\11"+
    "\25\0\1\70\3\0\3\11\1\70\10\11\1\226\12\11"+
    "\1\0\1\11\25\0\1\70\3\0\3\11\1\70\22\11"+
    "\1\227\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\15\11\1\230\5\11\1\0\1\11\25\0\1\70\3\0"+
    "\3\11\1\70\7\11\1\231\13\11\1\0\1\11\25\0"+
    "\1\70\3\0\1\11\1\232\1\11\1\70\4\11\1\232"+
    "\16\11\1\0\1\11\25\0\1\70\3\0\3\11\1\70"+
    "\16\11\1\233\4\11\1\0\1\11\25\0\1\70\3\0"+
    "\1\11\1\234\1\11\1\70\4\11\1\234\16\11\1\0"+
    "\1\11\25\0\1\70\3\0\3\11\1\70\22\11\1\127"+
    "\1\0\1\11\25\0\1\70\3\0\3\11\1\70\15\11"+
    "\1\127\5\11\1\0\1\11\25\0\1\70\3\0\3\11"+
    "\1\70\7\11\1\235\13\11\1\0\1\11\25\0\1\70"+
    "\3\0\3\11\1\70\16\11\1\236\4\11\1\0\1\11"+
    "\25\0\1\70\3\0\1\237\2\11\1\70\13\11\1\237"+
    "\7\11\1\0\1\11\25\0\1\70\3\0\1\240\2\11"+
    "\1\70\13\11\1\240\7\11\1\0\1\11\25\0\1\70"+
    "\3\0\1\122\2\11\1\70\13\11\1\122\7\11\1\0"+
    "\1\11\25\0\1\70\3\0\1\127\2\11\1\70\13\11"+
    "\1\127\7\11\1\0\1\11\25\0\1\70\3\0\3\11"+
    "\1\70\14\11\1\241\6\11\1\0\1\11\25\0\1\70"+
    "\3\0\3\11\1\70\10\11\1\242\12\11\1\0\1\11"+
    "\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\0\1\11\13\1\3\0\4\1\3\11"+
    "\1\0\7\11\2\1\1\11\13\1\2\0\1\1\1\0"+
    "\20\1\2\0\10\11\17\1\2\0\17\1\1\11\13\1"+
    "\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
Position Pos = new Position();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_ELSE,
new CSXToken(Pos));
          }
        case 50: break;
        case 3: 
          { yybegin(YYINITIAL);
Pos.col += 1;
          }
        case 51: break;
        case 13: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.LBRACKET,
new CSXToken(Pos));
          }
        case 52: break;
        case 8: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.NOT,
new CSXToken(Pos));
          }
        case 53: break;
        case 23: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.CAND,
new CSXToken(Pos));
          }
        case 54: break;
        case 14: 
          { Pos.setpos();
Pos.col = yytext().length();
return new Symbol(sym.RBRACKET,
new CSXToken(Pos));
          }
        case 55: break;
        case 21: 
          { Pos.setpos();
Pos.col = yytext().length();
return new Symbol(sym.rw_IF,
new CSXToken(Pos));
          }
        case 56: break;
        case 5: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.ASG,
new CSXToken(Pos));
          }
        case 57: break;
        case 45: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_CLASS,
new CSXToken(Pos));
          }
        case 58: break;
        case 20: 
          { Pos.setpos();
Pos.col += yytext().length();

return new Symbol(sym.STRLIT,
new CSXStringLitToken(yytext(), Pos));
          }
        case 59: break;
        case 17: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.LPAREN,
new CSXToken(Pos));
          }
        case 60: break;
        case 27: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.NOTEQ,
new CSXToken(Pos));
          }
        case 61: break;
        case 4: 
          { yybegin(FoundIdentifier);
Pos.setpos();
Pos.col += yytext().length();

return new Symbol(sym.IDENTIFIER,
new CSXIdentifierToken(yytext(), Pos));
          }
        case 62: break;
        case 38: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_READ,
new CSXToken(Pos));
          }
        case 63: break;
        case 47: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_PRINT,
new CSXToken(Pos));
          }
        case 64: break;
        case 10: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.COLON,
new CSXToken(Pos));
          }
        case 65: break;
        case 29: 
          { yybegin(YYINITIAL);
Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.DEC,
new CSXToken(Pos));
          }
        case 66: break;
        case 2: 
          { Pos.setpos();
Pos.col += yytext().length();

try{
	return new Symbol(sym.INTLIT,
	new CSXIntLitToken(Integer.parseInt(yytext()), Pos));
	
} catch (NumberFormatException e) {

    System.out.println("Overflow Error");
    System.out.println(e.getMessage());
 
 	return new Symbol(sym.INTLIT,
	new CSXIntLitToken(Integer.MAX_VALUE, Pos));
 }
          }
        case 67: break;
        case 22: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.COR,
new CSXToken(Pos));
          }
        case 68: break;
        case 31: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_INT,
new CSXToken(Pos));
          }
        case 69: break;
        case 11: 
          { yybegin(YYINITIAL);
Pos.line += 1;
Pos.col = 1;
          }
        case 70: break;
        case 18: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.RPAREN,
new CSXToken(Pos));
          }
        case 71: break;
        case 7: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.MINUS,
new CSXToken(Pos));
          }
        case 72: break;
        case 1: 
          { Pos.setpos();
Pos.col = yytext().length();
return new Symbol(sym.SLASH,
new CSXToken(Pos));
          }
        case 73: break;
        case 15: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.LBRACE,
new CSXToken(Pos));
          }
        case 74: break;
        case 32: 
          { Pos.setpos();
Pos.col += yytext().length();

return new Symbol(sym.CHARLIT,
new CSXCharLitToken(yycharat(Pos.col), Pos));
          }
        case 75: break;
        case 43: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_WHILE,
new CSXToken(Pos));
          }
        case 76: break;
        case 24: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.EQ,
new CSXToken(Pos));
          }
        case 77: break;
        case 28: 
          { yybegin(YYINITIAL);
Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.INC,
new CSXToken(Pos));
          }
        case 78: break;
        case 34: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_TRUE,
new CSXToken(Pos));
          }
        case 79: break;
        case 44: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_BREAK,
new CSXToken(Pos));
          }
        case 80: break;
        case 41: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_FLOAT,
new CSXToken(Pos));
          }
        case 81: break;
        case 26: 
          { yybegin(FoundIncOrDec);
Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.DEC,
new CSXToken(Pos));
          }
        case 82: break;
        case 39: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_VOID,
new CSXToken(Pos));
          }
        case 83: break;
        case 49: 
          { Pos.setpos();
Pos.col = yytext().length();
return new Symbol(sym.rw_CONTINUE,
new CSXToken(Pos));
          }
        case 84: break;
        case 12: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.COMMA,
new CSXToken(Pos));
          }
        case 85: break;
        case 30: 
          { Pos.setpos();
Pos.col += yytext().length();
yybegin(YYINITIAL);
return new Symbol(sym.error,
new CSXErrorToken("Found reserved word '" +  yytext() + "' after an Increment or Decrement operator, expected an identifier.", Pos));
          }
        case 86: break;
        case 36: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_BOOL,
new CSXToken(Pos));
          }
        case 87: break;
        case 40: 
          { Pos.setpos();
Pos.col += yytext().length();

return new Symbol(sym.GT,
new CSXStringLitToken(yytext(), Pos));
          }
        case 88: break;
        case 46: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_CONST,
new CSXToken(Pos));
          }
        case 89: break;
        case 37: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_CHAR,
new CSXToken(Pos));
          }
        case 90: break;
        case 42: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_FALSE,
new CSXToken(Pos));
          }
        case 91: break;
        case 48: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.rw_RETURN,
new CSXToken(Pos));
          }
        case 92: break;
        case 16: 
          { Pos.setpos();
Pos.col = yytext().length();
return new Symbol(sym.RBRACE,
new CSXToken(Pos));
          }
        case 93: break;
        case 33: 
          { Pos.setpos();
Pos.col += yytext().length();

return new Symbol(sym.LT,
new CSXStringLitToken(yytext(), Pos));
          }
        case 94: break;
        case 25: 
          { yybegin(FoundIncOrDec);
Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.INC,
new CSXToken(Pos));
          }
        case 95: break;
        case 19: 
          { Pos.setpos();
Pos.col += yytext().length();
yybegin(YYINITIAL);
return new Symbol(sym.error,
new CSXErrorToken("Found something other than an identifier after an Increment or Decrement operator", Pos));
          }
        case 96: break;
        case 6: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.PLUS,
new CSXToken(Pos));
          }
        case 97: break;
        case 9: 
          { Pos.setpos();
Pos.col += yytext().length();
return new Symbol(sym.SEMI,
new CSXToken(Pos));
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 
CSXEOFToken token = new CSXEOFToken(0,0);

if(yystate() == FoundIncOrDec)
{
token.error = "Could not find identifier after Increment or Decrement before end of file.";
}

return new Symbol(sym.EOF, token);

 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
