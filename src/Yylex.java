/* The following code was generated by JFlex 1.4.3 on 10/7/15 11:44 PM */

class CSXToken
{
	int linenum;
	int colnum;

	CSXToken()
	{

	}

	CSXToken(int line,int col)
	{
		linenum = line;
		colnum = col;
	}

	CSXToken(Position p)
	{
		linenum = p.linenum;
		colnum = p.colnum;

	}

}

class CSXIntLitToken extends CSXToken
{
	int intValue;
	CSXIntLitToken(int val, Position p)
	{
		super(p);
		intValue=val;
	}
}

class CSXFloatLitToken extends CSXToken
{
	float floatValue;
	CSXFloatLitToken(float floatValue, Position p)
	{
		super(p);
		this.floatValue = floatValue;
	}
}

class CSXIdentifierToken extends CSXToken
{
	String identifierValue;
	CSXIdentifierToken(String identifierValue, Position p)
	{
		super(p);
		this.identifierValue = identifierValue;
	}

}

class CSXCharLitToken extends CSXToken
{
	char charValue;
	CSXCharLitToken(char charValue, Position p)
	{
		super(p);
		this.charValue = charValue;
	}
}

class CSXStringLitToken extends CSXToken
{
	String stringValue;
	CSXStringLitToken(String stringValue, Position p)
	{
		super(p);
		this.stringValue = stringValue;
	}
}

class CSXErrorToken extends CSXToken
{
	String error;
	CSXErrorToken(String error, Position p)
	{
		super(p);
		this.error = error;
	}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Position
{
	int  linenum; 			/* maintain this as line number current token was scanned on */
	int  colnum; 			/* maintain this as column number current token began at */
	int  line; 				/* maintain this as line number after scanning current token  */
	int  col; 				/* maintain this as column number after scanning current token  */
	Position()
	{
		linenum = 1;
		colnum = 1;
		line = 1;
		col = 1;
	}
	void setpos()
	{ // set starting position for current token
		linenum = line;
		colnum = col;
	}
} ;


//This class is used by the scanner to return token information that is useful for the parser
//This class will be replaced in our parser project by the java_cup.runtime.Symbol class
class Symbol
{
	public int sym;
	public CSXToken value;
	public Symbol(int tokenType, CSXToken theToken)
	{
		sym = tokenType;
		value = theToken;
	}
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/7/15 11:44 PM from the specification file
 * <tt>D:/dev/Java/Scanner/src/csx.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FoundIdentifierMatch = 6;
  public static final int FoundIncOrDec = 4;
  public static final int FoundIdentifier = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\3\2\0\1\4\22\0\1\7\1\46\1\6\1\1"+
    "\2\0\1\42\1\40\1\61\1\62\1\51\1\47\1\54\1\50\1\64"+
    "\1\2\12\5\1\53\1\52\1\44\1\43\1\45\2\0\1\20\1\26"+
    "\1\27\1\35\1\25\1\15\1\13\1\23\1\24\1\13\1\37\1\16"+
    "\1\13\1\30\1\17\1\36\1\13\1\33\1\32\1\21\1\31\1\34"+
    "\1\22\2\13\1\13\1\57\1\10\1\60\1\0\1\14\1\0\1\20"+
    "\1\26\1\27\1\35\1\25\1\15\1\13\1\23\1\24\1\13\1\37"+
    "\1\16\1\13\1\11\1\17\1\36\1\13\1\33\1\32\1\12\1\31"+
    "\1\34\1\22\3\13\1\55\1\41\1\56\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\13\6\1\7\2\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\1\1\30\1\14\1\15\12\6"+
    "\1\31\1\0\1\32\1\33\1\0\1\34\1\0\6\6"+
    "\1\35\11\6\2\0\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\0\1\46\1\47\4\6\1\50"+
    "\11\6\1\31\1\0\1\32\4\6\1\51\12\6\1\52"+
    "\13\53\13\54\13\6\1\55\1\56\3\6\1\57\1\60"+
    "\4\6\1\61\1\6\1\62\1\63\1\6\5\53\1\64"+
    "\11\53\5\54\1\65\11\54\4\6\1\55\1\66\1\67"+
    "\1\70\1\71\1\72\1\6\1\73\1\6\1\74\13\53"+
    "\13\54\3\6\1\75\4\53\4\54\1\6\2\53\2\54"+
    "\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\330"+
    "\0\u017a\0\u01b0\0\u01e6\0\330\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\330\0\330"+
    "\0\330\0\330\0\u0654\0\u068a\0\330\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u068a\0\u01e6\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u021c\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\330\0\330\0\330\0\330\0\330\0\330"+
    "\0\u0dec\0\u0e22\0\u068a\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u021c\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e"+
    "\0\u1074\0\u10aa\0\u10e0\0\242\0\u1116\0\330\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u021c\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\330\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u021c\0\u1b6c\0\u1ba2\0\u1bd8\0\u021c\0\u021c\0\u1c0e\0\u1c44"+
    "\0\u1c7a\0\u1cb0\0\u021c\0\u1ce6\0\u021c\0\u021c\0\u1d1c\0\u1d52"+
    "\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1440\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u1692\0\u2154\0\u218a\0\u21c0\0\u21f6"+
    "\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6"+
    "\0\u23dc\0\330\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u2412"+
    "\0\u021c\0\u2448\0\u021c\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706"+
    "\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6"+
    "\0\u28ec\0\u2922\0\u2958\0\u298e\0\u021c\0\u29c4\0\u29fa\0\u2a30"+
    "\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0"+
    "\0\u2c16\0\u2c4c\0\u021c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\5\1\15\1\16\1\15\1\5\1\17\3\15\1\16"+
    "\1\20\1\15\1\21\1\22\1\23\1\24\3\15\1\25"+
    "\1\26\1\15\1\27\1\15\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\5\1\15\1\16\1\15\1\5\1\17"+
    "\3\15\1\16\1\20\1\15\1\21\1\22\1\23\1\24"+
    "\3\15\1\25\1\26\1\15\1\27\1\15\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\56\1\57\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\11\0\1\15\1\60\1\15"+
    "\1\0\1\61\3\15\1\60\1\62\1\15\1\63\1\64"+
    "\1\65\1\66\3\15\1\67\1\70\1\15\1\71\1\15"+
    "\37\0\3\72\1\0\23\72\115\0\1\73\66\0\1\74"+
    "\66\0\1\10\67\0\1\12\56\0\1\75\1\0\6\76"+
    "\1\77\1\76\1\100\55\76\5\0\1\101\3\0\3\15"+
    "\1\101\23\15\33\0\1\101\3\0\3\15\1\101\16\15"+
    "\1\102\4\15\33\0\1\101\3\0\3\15\1\101\1\15"+
    "\1\103\1\15\1\104\17\15\33\0\1\101\3\0\3\15"+
    "\1\101\6\15\1\105\14\15\33\0\1\101\3\0\1\106"+
    "\2\15\1\101\1\107\12\15\1\106\7\15\33\0\1\101"+
    "\3\0\3\15\1\101\1\15\1\110\21\15\33\0\1\101"+
    "\3\0\3\15\1\101\2\15\1\111\13\15\1\112\4\15"+
    "\33\0\1\101\3\0\3\15\1\101\1\15\1\113\1\114"+
    "\3\15\1\115\14\15\33\0\1\101\3\0\3\15\1\101"+
    "\10\15\1\116\12\15\33\0\1\101\3\0\3\15\1\101"+
    "\2\15\1\117\20\15\33\0\1\101\3\0\3\15\1\101"+
    "\16\15\1\120\4\15\36\0\1\121\3\122\1\0\23\122"+
    "\67\0\1\123\66\0\1\124\66\0\1\125\65\0\1\126"+
    "\65\0\1\127\65\0\1\130\71\0\1\131\66\0\1\132"+
    "\22\0\1\12\56\0\1\133\6\0\1\75\127\0\1\134"+
    "\66\0\1\135\22\0\1\101\3\0\3\15\1\101\16\15"+
    "\1\136\4\15\33\0\1\101\3\0\3\15\1\101\1\15"+
    "\1\137\1\15\1\64\17\15\33\0\1\101\3\0\3\15"+
    "\1\101\6\15\1\140\14\15\33\0\1\101\3\0\1\141"+
    "\2\15\1\101\1\142\12\15\1\141\7\15\33\0\1\101"+
    "\3\0\3\15\1\101\1\15\1\143\21\15\33\0\1\101"+
    "\3\0\3\15\1\101\2\15\1\144\13\15\1\145\4\15"+
    "\33\0\1\101\3\0\3\15\1\101\1\15\1\146\1\147"+
    "\3\15\1\150\14\15\33\0\1\101\3\0\3\15\1\101"+
    "\10\15\1\151\12\15\33\0\1\101\3\0\3\15\1\101"+
    "\2\15\1\152\20\15\33\0\1\101\3\0\3\15\1\101"+
    "\16\15\1\153\4\15\33\0\1\154\3\0\3\72\1\154"+
    "\23\72\26\0\1\73\1\155\64\73\3\74\1\156\62\74"+
    "\6\0\1\76\65\0\1\76\1\0\3\76\64\0\3\15"+
    "\1\0\23\15\33\0\1\101\3\0\3\15\1\101\14\15"+
    "\1\157\6\15\33\0\1\101\3\0\3\15\1\101\2\15"+
    "\1\160\20\15\33\0\1\101\3\0\3\15\1\101\1\15"+
    "\1\161\21\15\33\0\1\101\3\0\3\15\1\101\7\15"+
    "\1\162\13\15\33\0\1\101\3\0\1\15\1\163\1\15"+
    "\1\101\4\15\1\163\16\15\33\0\1\101\3\0\3\15"+
    "\1\101\15\15\1\164\5\15\33\0\1\101\3\0\3\15"+
    "\1\101\2\15\1\165\20\15\33\0\1\101\3\0\3\15"+
    "\1\101\10\15\1\166\12\15\33\0\1\101\3\0\3\15"+
    "\1\101\3\15\1\167\17\15\33\0\1\101\3\0\1\170"+
    "\2\15\1\101\13\15\1\170\7\15\33\0\1\101\3\0"+
    "\3\15\1\101\3\15\1\171\17\15\33\0\1\101\3\0"+
    "\1\15\1\172\1\15\1\101\3\15\1\173\1\172\16\15"+
    "\33\0\1\101\3\0\3\15\1\101\7\15\1\174\13\15"+
    "\33\0\1\101\3\0\3\15\1\101\7\15\1\175\13\15"+
    "\34\0\1\122\1\0\3\122\6\0\1\122\6\0\1\122"+
    "\2\0\1\122\4\0\1\122\65\0\1\176\36\0\1\177"+
    "\1\200\1\177\1\0\1\201\3\177\1\200\1\202\1\177"+
    "\1\203\1\204\1\205\1\206\3\177\1\207\1\210\1\177"+
    "\1\211\1\177\37\0\1\212\1\213\1\212\1\0\1\214"+
    "\3\212\1\213\1\215\1\212\1\216\1\217\1\220\1\221"+
    "\3\212\1\222\1\223\1\212\1\224\1\212\33\0\1\101"+
    "\3\0\3\15\1\101\14\15\1\225\6\15\33\0\1\101"+
    "\3\0\3\15\1\101\2\15\1\226\20\15\33\0\1\101"+
    "\3\0\3\15\1\101\7\15\1\227\13\15\33\0\1\101"+
    "\3\0\1\15\1\142\1\15\1\101\4\15\1\142\16\15"+
    "\33\0\1\101\3\0\3\15\1\101\15\15\1\225\5\15"+
    "\33\0\1\101\3\0\3\15\1\101\2\15\1\230\20\15"+
    "\33\0\1\101\3\0\3\15\1\101\10\15\1\231\12\15"+
    "\33\0\1\101\3\0\3\15\1\101\3\15\1\232\17\15"+
    "\33\0\1\101\3\0\1\233\2\15\1\101\13\15\1\233"+
    "\7\15\33\0\1\101\3\0\3\15\1\101\3\15\1\234"+
    "\17\15\33\0\1\101\3\0\1\15\1\235\1\15\1\101"+
    "\3\15\1\236\1\235\16\15\33\0\1\101\3\0\3\15"+
    "\1\101\7\15\1\236\13\15\33\0\1\101\3\0\3\15"+
    "\1\101\7\15\1\237\13\15\26\0\1\73\1\240\64\73"+
    "\5\0\1\101\3\0\3\15\1\101\10\15\1\241\12\15"+
    "\33\0\1\101\3\0\3\15\1\101\3\15\1\242\17\15"+
    "\33\0\1\101\3\0\3\15\1\101\15\15\1\243\5\15"+
    "\33\0\1\101\3\0\3\15\1\101\1\15\1\244\21\15"+
    "\33\0\1\101\3\0\3\15\1\101\10\15\1\245\12\15"+
    "\33\0\1\101\3\0\3\15\1\101\1\15\1\246\21\15"+
    "\33\0\1\101\3\0\3\15\1\101\3\15\1\247\17\15"+
    "\33\0\1\101\3\0\3\15\1\101\15\15\1\250\5\15"+
    "\33\0\1\101\3\0\1\15\1\251\1\15\1\101\4\15"+
    "\1\251\10\15\1\252\5\15\33\0\1\101\3\0\3\15"+
    "\1\101\16\15\1\253\4\15\33\0\1\101\3\0\3\15"+
    "\1\101\14\15\1\254\6\15\33\0\1\101\3\0\3\15"+
    "\1\101\20\15\1\255\2\15\33\0\1\101\3\0\3\15"+
    "\1\101\20\15\1\256\2\15\33\0\1\101\3\0\1\257"+
    "\2\15\1\101\13\15\1\257\7\15\33\0\1\260\3\0"+
    "\3\177\1\260\23\177\33\0\1\260\3\0\3\177\1\260"+
    "\16\177\1\261\4\177\33\0\1\260\3\0\3\177\1\260"+
    "\1\177\1\262\1\177\1\204\17\177\33\0\1\260\3\0"+
    "\3\177\1\260\6\177\1\263\14\177\33\0\1\260\3\0"+
    "\1\264\2\177\1\260\1\265\12\177\1\264\7\177\33\0"+
    "\1\260\3\0\3\177\1\260\1\177\1\266\21\177\33\0"+
    "\1\260\3\0\3\177\1\260\2\177\1\267\13\177\1\270"+
    "\4\177\33\0\1\260\3\0\3\177\1\260\1\177\1\271"+
    "\1\272\3\177\1\273\14\177\33\0\1\260\3\0\3\177"+
    "\1\260\10\177\1\274\12\177\33\0\1\260\3\0\3\177"+
    "\1\260\2\177\1\275\20\177\33\0\1\260\3\0\3\177"+
    "\1\260\16\177\1\276\4\177\33\0\1\277\3\0\3\212"+
    "\1\277\23\212\33\0\1\277\3\0\3\212\1\277\16\212"+
    "\1\300\4\212\33\0\1\277\3\0\3\212\1\277\1\212"+
    "\1\301\1\212\1\217\17\212\33\0\1\277\3\0\3\212"+
    "\1\277\6\212\1\302\14\212\33\0\1\277\3\0\1\303"+
    "\2\212\1\277\1\304\12\212\1\303\7\212\33\0\1\277"+
    "\3\0\3\212\1\277\1\212\1\305\21\212\33\0\1\277"+
    "\3\0\3\212\1\277\2\212\1\306\13\212\1\307\4\212"+
    "\33\0\1\277\3\0\3\212\1\277\1\212\1\310\1\311"+
    "\3\212\1\312\14\212\33\0\1\277\3\0\3\212\1\277"+
    "\10\212\1\313\12\212\33\0\1\277\3\0\3\212\1\277"+
    "\2\212\1\314\20\212\33\0\1\277\3\0\3\212\1\277"+
    "\16\212\1\315\4\212\33\0\1\101\3\0\3\15\1\101"+
    "\10\15\1\142\12\15\33\0\1\101\3\0\3\15\1\101"+
    "\3\15\1\141\17\15\33\0\1\101\3\0\3\15\1\101"+
    "\1\15\1\225\21\15\33\0\1\101\3\0\3\15\1\101"+
    "\1\15\1\142\21\15\33\0\1\101\3\0\3\15\1\101"+
    "\3\15\1\316\17\15\33\0\1\101\3\0\3\15\1\101"+
    "\15\15\1\317\5\15\33\0\1\101\3\0\1\15\1\320"+
    "\1\15\1\101\4\15\1\320\10\15\1\141\5\15\33\0"+
    "\1\101\3\0\3\15\1\101\16\15\1\142\4\15\33\0"+
    "\1\101\3\0\3\15\1\101\14\15\1\321\6\15\33\0"+
    "\1\101\3\0\3\15\1\101\20\15\1\142\2\15\33\0"+
    "\1\101\3\0\1\141\2\15\1\101\13\15\1\141\7\15"+
    "\27\0\1\322\71\0\1\101\3\0\1\15\1\323\1\15"+
    "\1\101\4\15\1\323\16\15\33\0\1\101\3\0\3\15"+
    "\1\101\10\15\1\324\12\15\33\0\1\101\3\0\3\15"+
    "\1\101\10\15\1\325\12\15\33\0\1\101\3\0\3\15"+
    "\1\101\22\15\1\326\33\0\1\101\3\0\3\15\1\101"+
    "\15\15\1\327\5\15\33\0\1\101\3\0\3\15\1\101"+
    "\7\15\1\330\13\15\33\0\1\101\3\0\1\15\1\331"+
    "\1\15\1\101\4\15\1\331\16\15\33\0\1\101\3\0"+
    "\3\15\1\101\16\15\1\332\4\15\33\0\1\101\3\0"+
    "\1\15\1\333\1\15\1\101\4\15\1\333\16\15\37\0"+
    "\3\177\1\0\23\177\33\0\1\260\3\0\3\177\1\260"+
    "\14\177\1\334\6\177\33\0\1\260\3\0\3\177\1\260"+
    "\2\177\1\335\20\177\33\0\1\260\3\0\3\177\1\260"+
    "\7\177\1\336\13\177\33\0\1\260\3\0\1\177\1\265"+
    "\1\177\1\260\4\177\1\265\16\177\33\0\1\260\3\0"+
    "\3\177\1\260\15\177\1\334\5\177\33\0\1\260\3\0"+
    "\3\177\1\260\2\177\1\337\20\177\33\0\1\260\3\0"+
    "\3\177\1\260\10\177\1\340\12\177\33\0\1\260\3\0"+
    "\3\177\1\260\3\177\1\341\17\177\33\0\1\260\3\0"+
    "\1\342\2\177\1\260\13\177\1\342\7\177\33\0\1\260"+
    "\3\0\3\177\1\260\3\177\1\343\17\177\33\0\1\260"+
    "\3\0\1\177\1\344\1\177\1\260\3\177\1\345\1\344"+
    "\16\177\33\0\1\260\3\0\3\177\1\260\7\177\1\345"+
    "\13\177\33\0\1\260\3\0\3\177\1\260\7\177\1\346"+
    "\13\177\37\0\3\212\1\0\23\212\33\0\1\277\3\0"+
    "\3\212\1\277\14\212\1\347\6\212\33\0\1\277\3\0"+
    "\3\212\1\277\2\212\1\350\20\212\33\0\1\277\3\0"+
    "\3\212\1\277\7\212\1\351\13\212\33\0\1\277\3\0"+
    "\1\212\1\304\1\212\1\277\4\212\1\304\16\212\33\0"+
    "\1\277\3\0\3\212\1\277\15\212\1\347\5\212\33\0"+
    "\1\277\3\0\3\212\1\277\2\212\1\352\20\212\33\0"+
    "\1\277\3\0\3\212\1\277\10\212\1\353\12\212\33\0"+
    "\1\277\3\0\3\212\1\277\3\212\1\354\17\212\33\0"+
    "\1\277\3\0\1\355\2\212\1\277\13\212\1\355\7\212"+
    "\33\0\1\277\3\0\3\212\1\277\3\212\1\356\17\212"+
    "\33\0\1\277\3\0\1\212\1\357\1\212\1\277\3\212"+
    "\1\360\1\357\16\212\33\0\1\277\3\0\3\212\1\277"+
    "\7\212\1\360\13\212\33\0\1\277\3\0\3\212\1\277"+
    "\7\212\1\361\13\212\33\0\1\101\3\0\3\15\1\101"+
    "\22\15\1\142\33\0\1\101\3\0\3\15\1\101\15\15"+
    "\1\142\5\15\33\0\1\101\3\0\3\15\1\101\7\15"+
    "\1\362\13\15\33\0\1\101\3\0\3\15\1\101\16\15"+
    "\1\363\4\15\33\0\1\101\3\0\1\364\2\15\1\101"+
    "\13\15\1\364\7\15\33\0\1\101\3\0\1\365\2\15"+
    "\1\101\13\15\1\365\7\15\33\0\1\260\3\0\3\177"+
    "\1\260\10\177\1\265\12\177\33\0\1\260\3\0\3\177"+
    "\1\260\3\177\1\264\17\177\33\0\1\260\3\0\3\177"+
    "\1\260\1\177\1\334\21\177\33\0\1\260\3\0\3\177"+
    "\1\260\1\177\1\265\21\177\33\0\1\260\3\0\3\177"+
    "\1\260\3\177\1\366\17\177\33\0\1\260\3\0\3\177"+
    "\1\260\15\177\1\367\5\177\33\0\1\260\3\0\1\177"+
    "\1\370\1\177\1\260\4\177\1\370\10\177\1\264\5\177"+
    "\33\0\1\260\3\0\3\177\1\260\16\177\1\265\4\177"+
    "\33\0\1\260\3\0\3\177\1\260\14\177\1\371\6\177"+
    "\33\0\1\260\3\0\3\177\1\260\20\177\1\265\2\177"+
    "\33\0\1\260\3\0\1\264\2\177\1\260\13\177\1\264"+
    "\7\177\33\0\1\277\3\0\3\212\1\277\10\212\1\304"+
    "\12\212\33\0\1\277\3\0\3\212\1\277\3\212\1\303"+
    "\17\212\33\0\1\277\3\0\3\212\1\277\1\212\1\347"+
    "\21\212\33\0\1\277\3\0\3\212\1\277\1\212\1\304"+
    "\21\212\33\0\1\277\3\0\3\212\1\277\3\212\1\372"+
    "\17\212\33\0\1\277\3\0\3\212\1\277\15\212\1\373"+
    "\5\212\33\0\1\277\3\0\1\212\1\374\1\212\1\277"+
    "\4\212\1\374\10\212\1\303\5\212\33\0\1\277\3\0"+
    "\3\212\1\277\16\212\1\304\4\212\33\0\1\277\3\0"+
    "\3\212\1\277\14\212\1\375\6\212\33\0\1\277\3\0"+
    "\3\212\1\277\20\212\1\304\2\212\33\0\1\277\3\0"+
    "\1\303\2\212\1\277\13\212\1\303\7\212\33\0\1\101"+
    "\3\0\1\136\2\15\1\101\13\15\1\136\7\15\33\0"+
    "\1\101\3\0\1\142\2\15\1\101\13\15\1\142\7\15"+
    "\33\0\1\101\3\0\3\15\1\101\14\15\1\376\6\15"+
    "\33\0\1\260\3\0\3\177\1\260\22\177\1\265\33\0"+
    "\1\260\3\0\3\177\1\260\15\177\1\265\5\177\33\0"+
    "\1\260\3\0\3\177\1\260\7\177\1\377\13\177\33\0"+
    "\1\260\3\0\3\177\1\260\16\177\1\u0100\4\177\33\0"+
    "\1\277\3\0\3\212\1\277\22\212\1\304\33\0\1\277"+
    "\3\0\3\212\1\277\15\212\1\304\5\212\33\0\1\277"+
    "\3\0\3\212\1\277\7\212\1\u0101\13\212\33\0\1\277"+
    "\3\0\3\212\1\277\16\212\1\u0102\4\212\33\0\1\101"+
    "\3\0\3\15\1\101\10\15\1\u0103\12\15\33\0\1\260"+
    "\3\0\1\261\2\177\1\260\13\177\1\261\7\177\33\0"+
    "\1\260\3\0\1\265\2\177\1\260\13\177\1\265\7\177"+
    "\33\0\1\277\3\0\1\300\2\212\1\277\13\212\1\300"+
    "\7\212\33\0\1\277\3\0\1\304\2\212\1\277\13\212"+
    "\1\304\7\212\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11394];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\3\1\1\11\24\1\12\11"+
    "\2\1\1\11\15\1\1\0\2\1\1\0\1\1\1\0"+
    "\20\1\2\0\6\11\2\1\1\0\21\1\1\0\1\11"+
    "\17\1\1\11\123\1\1\11\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
Position Pos = new Position();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.GT, new CSXToken(Pos));
          }
        case 63: break;
        case 18: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACKET, new CSXToken(Pos));
          }
        case 64: break;
        case 25: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 65: break;
        case 17: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COMMA, new CSXToken(Pos));
          }
        case 66: break;
        case 24: 
          { Pos.setpos();
    yybegin(YYINITIAL);
    Pos.col += 1;
          }
        case 67: break;
        case 9: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LT, new CSXToken(Pos));
          }
        case 68: break;
        case 47: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos));
          }
        case 69: break;
        case 19: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RBRACKET, new CSXToken(Pos));
          }
        case 70: break;
        case 31: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.CAND,
			new CSXToken(Pos));
          }
        case 71: break;
        case 21: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RBRACE, new CSXToken(Pos));
          }
        case 72: break;
        case 49: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos));
          }
        case 73: break;
        case 39: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC, new CSXToken(Pos));
          }
        case 74: break;
        case 36: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"++\" operator", Pos));
          }
        case 75: break;
        case 40: 
          { Pos.setpos();
	Pos.col += yytext().length();
	yybegin(YYINITIAL);
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word '" +  yytext() + "' after an Increment or Decrement operator, expected an identifier.", Pos));
          }
        case 76: break;
        case 27: 
          { Pos.setpos();
	String parsedString = yytext();
	Pos.col += parsedString.length();
	parsedString = parsedString.replace('~', '-');
	
    float parsedFloat = Float.parseFloat(parsedString);
    if(parsedFloat == Float.NEGATIVE_INFINITY || parsedFloat == Float.POSITIVE_INFINITY)
    {
		System.out.println("Float Overflow Error");

		return new Symbol(sym.FLOATLIT,
				new CSXFloatLitToken(Float.MAX_VALUE, Pos));
    }
    else
    {
		return new Symbol(sym.FLOATLIT,
			new CSXFloatLitToken(parsedFloat, Pos));
	}
          }
        case 77: break;
        case 48: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos));
          }
        case 78: break;
        case 7: 
          { Pos.setpos();
	Pos.col += yytext().length();
          }
        case 79: break;
        case 50: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_READ,
			new CSXToken(Pos));
          }
        case 80: break;
        case 1: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found invalid token: " + yytext(), Pos));
          }
        case 81: break;
        case 44: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC, new CSXToken(Pos));
          }
        case 82: break;
        case 29: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_IF,
			new CSXToken(Pos));
          }
        case 83: break;
        case 62: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos));
          }
        case 84: break;
        case 60: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos));
          }
        case 85: break;
        case 37: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"--\" operator", Pos));
          }
        case 86: break;
        case 6: 
          { yybegin(FoundIdentifier);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 87: break;
        case 38: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC, new CSXToken(Pos));
          }
        case 88: break;
        case 55: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos));
          }
        case 89: break;
        case 46: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos));
          }
        case 90: break;
        case 14: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.TIMES, new CSXToken(Pos));
          }
        case 91: break;
        case 22: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LPAREN, new CSXToken(Pos));
          }
        case 92: break;
        case 12: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.PLUS, new CSXToken(Pos));
          }
        case 93: break;
        case 35: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOTEQ, new CSXToken(Pos));
          }
        case 94: break;
        case 59: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONST,
			new CSXToken(Pos));
          }
        case 95: break;
        case 28: 
          { Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.STRLIT,
			new CSXStringLitToken(yytext(), Pos));
          }
        case 96: break;
        case 43: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC, new CSXToken(Pos));
          }
        case 97: break;
        case 32: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.EQ,
			new CSXToken(Pos));
          }
        case 98: break;
        case 15: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SEMI, new CSXToken(Pos));
          }
        case 99: break;
        case 56: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos));
          }
        case 100: break;
        case 3: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.line += 1;
	Pos.col = 1;
          }
        case 101: break;
        case 16: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COLON, new CSXToken(Pos));
          }
        case 102: break;
        case 45: 
          { Pos.setpos();
	
    int rowsSkipped = 0;
    String parseString = yytext();
	for(int i = 0; i < parseString.length(); i++)
	{
		Pos.col++;
		if(parseString.charAt(i) == '\n')
		{
			Pos.col=1;
			Pos.line++;
		}
	}
	
    System.out.println("Block Comment: " + parseString);
          }
        case 103: break;
        case 11: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOT, new CSXToken(Pos));
          }
        case 104: break;
        case 61: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos));
          }
        case 105: break;
        case 2: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SLASH, new CSXToken(Pos));
          }
        case 106: break;
        case 5: 
          { Pos.setpos();
	yybegin(YYINITIAL);
	Pos.col += 1;
          }
        case 107: break;
        case 34: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.GEQ, new CSXToken(Pos));
          }
        case 108: break;
        case 52: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"++\" operator", Pos));
          }
        case 109: break;
        case 4: 
          { Pos.setpos();
	
	String parsedString = yytext();
	Pos.col += parsedString.length();
	parsedString = parsedString.replace('~', '-');

	try{
		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.parseInt(parsedString), Pos));

	} catch (NumberFormatException e) {

		System.out.println("Overflow Error");
		System.out.println(e.getMessage());

		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.MAX_VALUE, Pos));
	}
          }
        case 110: break;
        case 8: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.ASG, new CSXToken(Pos));
          }
        case 111: break;
        case 51: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_VOID,
			new CSXToken(Pos));
          }
        case 112: break;
        case 42: 
          { Pos.setpos();
	String charString = yytext();
	Pos.col += charString.length();

	char parsedChar;
	switch(charString)
	{
		case "'\\n'":
			parsedChar = '\n';
			break;
		case "'\\t'":
			parsedChar = '\t';
			break;
		case "'\\\\'":
			parsedChar = '\\';
			break;
		case "'\\''":
			parsedChar = '\'';
			break;
		default:
			parsedChar = charString.charAt(1);
			break;
	}
	
	return new Symbol(sym.CHARLIT,
			new CSXCharLitToken(parsedChar, Pos));
          }
        case 113: break;
        case 41: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_INT,
			new CSXToken(Pos));
          }
        case 114: break;
        case 26: 
          { String comment = yytext();
    System.out.println("Line Comment: " + comment);
    Pos.setpos();
    Pos.col += comment.length();
          }
        case 115: break;
        case 23: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RPAREN, new CSXToken(Pos));
          }
        case 116: break;
        case 13: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.MINUS, new CSXToken(Pos));
          }
        case 117: break;
        case 58: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos));
          }
        case 118: break;
        case 57: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos));
          }
        case 119: break;
        case 54: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FLOAT,
			new CSXToken(Pos));
          }
        case 120: break;
        case 33: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LEQ, new CSXToken(Pos));
          }
        case 121: break;
        case 53: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"--\" operator", Pos));
          }
        case 122: break;
        case 20: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACE, new CSXToken(Pos));
          }
        case 123: break;
        case 30: 
          { Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COR,
			new CSXToken(Pos));
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(sym.EOF, new CSXToken(0,0));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
